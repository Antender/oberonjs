MODULE CodeGenerator;
IMPORT
    Stream, String;
CONST
    kTab* = 09X;
TYPE
    IGenerator* = RECORD
        PROCEDURE write*(s: STRING);
        PROCEDURE openScope*();
        PROCEDURE closeScope*(ending: STRING);
        PROCEDURE result*(): STRING;
    END;

    PIGenerator* = POINTER TO IGenerator;

    NullGenerator = RECORD(IGenerator)
    END;

    SimpleGenerator = RECORD(NullGenerator)
        mResult: STRING
    END;

    Indent* = RECORD
        indent*: INTEGER;
        result*: STRING;
    END;

    Generator = RECORD(IGenerator)
        indent: Indent;
    END;

VAR
    nullGenerator*: NullGenerator;

PROCEDURE NullGenerator.write(s: STRING); END;

PROCEDURE NullGenerator.openScope(); END;

PROCEDURE NullGenerator.closeScope(ending: STRING); END;

PROCEDURE NullGenerator.result(): STRING;
    RETURN "";
END;

PROCEDURE SimpleGenerator.write(s: STRING);
BEGIN
    SELF.mResult := SELF.mResult + s;
END;

PROCEDURE SimpleGenerator.result(): STRING;
    RETURN SELF.mResult
END;

PROCEDURE makeIndent(count: INTEGER): STRING;
VAR
    result: STRING;
BEGIN
    FOR i <- 0 TO count - 1 DO
        result := result + kTab;
    END;
    RETURN result
END;

PROCEDURE indentText*(s: STRING; indent: INTEGER): STRING;
VAR
    result: STRING;
BEGIN
    index <- String.indexOf(s, Stream.kCR);
    pos <- 0;
    WHILE index # -1 DO
        INC(index);
        result := result + String.substr(s, pos, index - pos) + makeIndent(indent);
        pos := index;
        index := String.indexOfFrom(s, Stream.kCR, pos);
    END;
    RETURN result + String.substr(s, pos, LEN(s) - pos);
END;

PROCEDURE addIndentedText*(s: STRING; VAR indent: Indent);
BEGIN
    indent.result := indent.result + indentText(s, indent.indent);
END;

PROCEDURE openScope*(VAR indent: Indent);
BEGIN
    INC(indent.indent);
    indent.result := indent.result + "{" + Stream.kCR + makeIndent(indent.indent);
END;

PROCEDURE closeScope*(ending: STRING; VAR indent: Indent);
BEGIN
    DEC(indent.indent);
    indent.result := String.substr(indent.result, 0, LEN(indent.result) - 1) + "}";
    IF LEN(ending) # 0 THEN
        addIndentedText(ending, indent);
    ELSE
        indent.result := indent.result + Stream.kCR + makeIndent(indent.indent);
    END;
END;

PROCEDURE Generator.write(s: STRING);
BEGIN
    addIndentedText(s, SELF.indent);
END;

PROCEDURE Generator.openScope();
BEGIN
    openScope(SELF.indent);
END;

PROCEDURE Generator.closeScope(ending: STRING);
BEGIN
    closeScope(ending, SELF.indent);
END;

PROCEDURE Generator.result(): STRING;
    RETURN SELF.indent.result
END;

PROCEDURE makeSimpleGenerator*(): PIGenerator;
    RETURN NEW SimpleGenerator();
END;

PROCEDURE makeGenerator*(): PIGenerator;
    RETURN NEW Generator();
END;

END CodeGenerator.
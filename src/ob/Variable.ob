MODULE Variable;
IMPORT
    Types;
TYPE

    TypedVariable* = RECORD(Types.Variable)
        PROCEDURE TypedVariable*(type: Types.PStorageType);

        mType: Types.PStorageType;
    END;

    Declared* = RECORD(Types.DeclaredVariable)
        PROCEDURE Declared*(id: STRING; type: Types.PStorageType);

        mType: Types.PStorageType;
        mId: STRING;
    END;
    PDeclared* = POINTER TO Declared;

    ArgumentVariable* = RECORD(Declared)
        PROCEDURE ArgumentVariable*(id: STRING; type: Types.PStorageType; var: BOOLEAN);

        var-: BOOLEAN;
    END;

    PropertyVariable* = RECORD(TypedVariable)
        PROCEDURE PropertyVariable*(type: Types.PStorageType; leadCode, propCode: STRING; isReadOnly: BOOLEAN);

        leadCode-, propCode-: STRING;
        readOnly: BOOLEAN;
    END;

    DerefVariable* = RECORD(TypedVariable)
        PROCEDURE DerefVariable*(type: Types.PStorageType; code: STRING);

        code-: STRING;
    END;

    ExportedVariable* = RECORD(TypedVariable)
        PROCEDURE ExportedVariable*(id: STRING; type: Types.PStorageType);

        id: STRING;
    END;

    PExportedVariable = POINTER TO ExportedVariable;

PROCEDURE TypedVariable.type(): Types.PStorageType;
    RETURN SELF.mType
END;

PROCEDURE Declared.isReference(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE Declared.isReadOnly(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE Declared.type(): Types.PStorageType;
    RETURN SELF.mType
END;

PROCEDURE Declared.id(): STRING;
    RETURN SELF.mId;
END;

PROCEDURE PropertyVariable.idType(): STRING;
VAR
    result: STRING;
BEGIN
    result := "array's element";
    IF SELF.readOnly THEN
        result := "read-only " + result; 
    END;
    RETURN result;
END;

PROCEDURE PropertyVariable.isReference(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE PropertyVariable.isReadOnly(): BOOLEAN;
    RETURN SELF.readOnly;
END;

PROCEDURE DerefVariable.isReference(): BOOLEAN;
    RETURN TRUE;
END;

PROCEDURE DerefVariable.isReadOnly(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE ExportedVariable.ExportedVariable(id: STRING; type: Types.PStorageType)
    | SUPER(type),
      id(id);
END;

PROCEDURE ExportedVariable.idType(): STRING;
    RETURN "imported variable"
END ExportedVariable.idType;

PROCEDURE ExportedVariable.isReference(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE ExportedVariable.isReadOnly(): BOOLEAN;
    RETURN TRUE;
END;

PROCEDURE TypedVariable.TypedVariable(type: Types.PStorageType)
    | mType(type);
END;

PROCEDURE Declared.Declared(id: STRING; type: Types.PStorageType)
    | mType(type),
      mId(id);
END;

PROCEDURE PropertyVariable.PropertyVariable(type: Types.PStorageType; leadCode, propCode: STRING; isReadOnly: BOOLEAN)
    | SUPER(type),
      leadCode(leadCode),
      propCode(propCode),
      readOnly(isReadOnly);
END;

PROCEDURE DerefVariable.DerefVariable(type: Types.PStorageType; code: STRING)
    | SUPER(type),
      code(code);
      END;

PROCEDURE ArgumentVariable.ArgumentVariable(id: STRING; type: Types.PStorageType; var: BOOLEAN)
    | SUPER(id, type),
      var(var);
END;

PROCEDURE ArgumentVariable.idType(): STRING;
VAR
    result: STRING;
BEGIN
    result := "formal parameter";
    IF ~SELF.var THEN
        result := "non-VAR " + result;
    END;
    RETURN result;
END;

PROCEDURE ArgumentVariable.isReference(): BOOLEAN;
    RETURN SELF.var;
END;

PROCEDURE ArgumentVariable.isReadOnly(): BOOLEAN;
BEGIN
    r <- FALSE;
    IF ~SELF.var THEN
        t <- SELF.type(); 
        r := (t IS Types.PArray) OR (t IS Types.PRecord);
    END;
    RETURN r;
END;

END Variable.
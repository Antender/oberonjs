MODULE Variable;
IMPORT
    OberonRtl, Types;
TYPE

    TypedVariable* = RECORD(Types.Variable)
        PROCEDURE TypedVariable*(type: Types.PStorageType);

        mType: Types.PStorageType;
    END;

    Declared* = RECORD(Types.DeclaredVariable)
        PROCEDURE Declared*(id: STRING; type: Types.PStorageType);

        mType: Types.PStorageType;
        mId: STRING;
    END;
    PDeclared* = POINTER TO Declared;

    ArgumentVariable* = RECORD(Declared)
        PROCEDURE ArgumentVariable*(id: STRING; type: Types.PStorageType; var: BOOLEAN);

        var-: BOOLEAN;
    END;

    PropertyVariable* = RECORD(TypedVariable)
        PROCEDURE PropertyVariable*(type: Types.PStorageType; leadCode, propCode: STRING; isReadOnly: BOOLEAN; rtl: OberonRtl.PType);

        leadCode, propCode: STRING;
        readOnly: BOOLEAN;
        rtl: OberonRtl.PType;
    END;

    DerefVariable* = RECORD(TypedVariable)
        PROCEDURE DerefVariable*(type: Types.PStorageType; code: STRING);

        code: STRING;
    END;

    ExportedVariable = RECORD(TypedVariable)
    END;

    PExportedVariable = POINTER TO ExportedVariable;

PROCEDURE TypedVariable.type(): Types.PStorageType;
    RETURN SELF.mType
END;

PROCEDURE Declared.referenceCode(): STRING;
BEGIN
    result <- SELF.mId;
    IF SELF.mType.isScalar() THEN
        result := "{set: function($v){" + result + " = $v;}, get: function(){return " + result + ";}}";
    END;
    RETURN result;
END;

PROCEDURE Declared.isReference(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE Declared.isReadOnly(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE Declared.type(): Types.PStorageType;
    RETURN SELF.mType
END;

PROCEDURE Declared.id(): STRING;
    RETURN SELF.mId;
END;

PROCEDURE PropertyVariable.idType(): STRING;
VAR
    result: STRING;
BEGIN
    result := "array's element";
    IF SELF.readOnly THEN
        result := "read-only " + result; 
    END;
    RETURN result;
END;

PROCEDURE PropertyVariable.referenceCode(): STRING;
VAR
    result: STRING;
BEGIN
    IF SELF.type().isScalar() THEN
        result := SELF.rtl.makeRef(SELF.leadCode, SELF.propCode);
    ELSE
        result := SELF.leadCode + "[" + SELF.propCode + "]";
    END;
    RETURN result;
END;

PROCEDURE PropertyVariable.isReference(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE PropertyVariable.isReadOnly(): BOOLEAN;
    RETURN SELF.readOnly;
END;

PROCEDURE DerefVariable.referenceCode(): STRING;
    RETURN SELF.code;
END;

PROCEDURE DerefVariable.isReference(): BOOLEAN;
    RETURN TRUE;
END;

PROCEDURE DerefVariable.isReadOnly(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE ExportedVariable.idType(): STRING;
    RETURN "imported variable"
END ExportedVariable.idType;

PROCEDURE ExportedVariable.isReference(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE ExportedVariable.isReadOnly(): BOOLEAN;
    RETURN TRUE;
END;

PROCEDURE ExportedVariable.referenceCode(): STRING;
BEGIN
    RETURN "";
END;

PROCEDURE TypedVariable.TypedVariable(type: Types.PStorageType)
    | mType(type);
END;

PROCEDURE Declared.Declared(id: STRING; type: Types.PStorageType)
    | mType(type),
      mId(id);
END;

PROCEDURE PropertyVariable.PropertyVariable(type: Types.PStorageType; leadCode, propCode: STRING; isReadOnly: BOOLEAN; rtl: OberonRtl.PType)
    | SUPER(type),
      leadCode(leadCode),
      propCode(propCode),
      readOnly(isReadOnly),
      rtl(rtl);
END;

PROCEDURE DerefVariable.DerefVariable(type: Types.PStorageType; code: STRING)
    | SUPER(type),
      code(code);
      END;

PROCEDURE ArgumentVariable.ArgumentVariable(id: STRING; type: Types.PStorageType; var: BOOLEAN)
    | SUPER(id, type),
      var(var);
END;

PROCEDURE ArgumentVariable.idType(): STRING;
VAR
    result: STRING;
BEGIN
    result := "formal parameter";
    IF ~SELF.var THEN
        result := "non-VAR " + result;
    END;
    RETURN result;
END;

PROCEDURE ArgumentVariable.isReference(): BOOLEAN;
    RETURN SELF.var;
END;

PROCEDURE ArgumentVariable.isReadOnly(): BOOLEAN;
BEGIN
    r <- FALSE;
    IF ~SELF.var THEN
        t <- SELF.type(); 
        r := (t IS Types.PArray) OR (t IS Types.PRecord);
    END;
    RETURN r;
END;

PROCEDURE ArgumentVariable.referenceCode(): STRING;
VAR
    result: STRING;
BEGIN
    IF SELF.var THEN
        result := SELF.mId;
    ELSE
        result := SUPER();
    END;
    RETURN result;
END;

PROCEDURE makeExportedVariable*(v: Types.Variable): Types.PVariable;
    RETURN NEW ExportedVariable(v.type());
END;

END Variable.
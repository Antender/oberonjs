MODULE TypeId;
IMPORT
    Types, Object;
TYPE
    PType* = POINTER TO Type;
    Type* = RECORD(Types.Id)
        PROCEDURE Type*(type: Types.PStorageType);

        PROCEDURE type*(): Types.PStorageType;
        PROCEDURE reset*(type: Types.PStorageType);
        PROCEDURE description*(): STRING;

        mType: Types.PStorageType;
    END;

    ResolveTypeCallback = PROCEDURE(closure: Object.PType): Types.PStorageType;

    Forward* = RECORD(Type)
        PROCEDURE Forward*(resolve: ResolveTypeCallback; closure: Object.PType);

        resolve: ResolveTypeCallback;
        closure: Object.PType;
    END;

    PForward = POINTER TO Forward;

    Lazy* = RECORD(Type)
        PROCEDURE Lazy*();
    END;

    PLazy = POINTER TO Lazy;

PROCEDURE Type.description(): STRING;
    RETURN "type " + SELF.type().description()
END;

PROCEDURE Type.type(): Types.PStorageType;
    RETURN SELF.mType
END;

PROCEDURE Type.reset(type: Types.PStorageType);
BEGIN
    SELF.mType := type;
END;

PROCEDURE Forward.Forward(resolve: ResolveTypeCallback; closure: Object.PType)
    | SUPER(NIL),
      resolve(resolve),
      closure(closure);
END;

PROCEDURE Forward.type(): Types.PStorageType;
BEGIN
    IF SELF.mType = NIL THEN
        SELF.mType := SELF.resolve(SELF.closure);
    END;
    RETURN SELF.mType
END;

PROCEDURE define*(VAR tId: Lazy; t: Types.PStorageType);
BEGIN
    tId.mType := t;
END;

PROCEDURE Type.idType(): STRING;
    RETURN "type"
END Type.idType;

PROCEDURE Type.Type(type: Types.PStorageType)
    | mType(type);
END;

PROCEDURE Lazy.Lazy()
    | SUPER(NIL);
END;

END TypeId.
MODULE Expression;
IMPORT
    ConstValue, Precedence := CodePrecedence, Types;
TYPE
    Type* = RECORD
        PROCEDURE Type*(
            code: STRING; 
            type: Types.PType; 
            info: Types.PId; 
            constValue: ConstValue.PType; 
            maxPrecedence: INTEGER);

        PROCEDURE code*(): STRING;
        PROCEDURE type*(): Types.PType;
        PROCEDURE info*(): Types.PId;
        PROCEDURE constValue*(): ConstValue.PType;
        PROCEDURE maxPrecedence*(): INTEGER;
        PROCEDURE isTerm*(): BOOLEAN;

        mCode: STRING;
        mType: Types.PType;
        mInfo: Types.PId;
        mConstValue: ConstValue.PType;
        mMaxPrecedence: INTEGER
    END;

    PType* = POINTER TO Type;

PROCEDURE Type.code(): STRING;
    RETURN SELF.mCode
END;

PROCEDURE Type.type(): Types.PType;
    RETURN SELF.mType
END;

PROCEDURE Type.info(): Types.PId;
    RETURN SELF.mInfo;
END;

PROCEDURE Type.constValue(): ConstValue.PType;
    RETURN SELF.mConstValue
END;

PROCEDURE Type.maxPrecedence(): INTEGER;
    RETURN SELF.mMaxPrecedence
END;

PROCEDURE Type.isTerm(): BOOLEAN;
    RETURN (SELF.mInfo = NIL) & (SELF.mMaxPrecedence = Precedence.none)
END;

PROCEDURE Type.Type(
    code: STRING; 
    type: Types.PType; 
    info: Types.PId; 
    constValue: ConstValue.PType; 
    maxPrecedence: INTEGER)
  | mCode(code),
    mType(type),
    mInfo(info),
    mConstValue(constValue),
    mMaxPrecedence(maxPrecedence);
END;

PROCEDURE make*(
    code: STRING; 
    type: Types.PType; 
    info: Types.PId; 
    constValue: ConstValue.PType)
    : PType;
    RETURN NEW Type(code, type, info, constValue, Precedence.none)
END;

PROCEDURE makeSimple*(code: STRING; type: Types.PType): PType;
    RETURN make(code, type, NIL, NIL)
END;

PROCEDURE derefCode*(code: STRING): STRING;
    RETURN code + ".get()";
END;

PROCEDURE deref*(e: PType): PType;
BEGIN
    result <- e;
    info <- e.mInfo;
    type <- e.mType;
    IF    (info # NIL)
      & ~((type IS Types.PArray) OR (type IS Types.PRecord)) THEN
        
        IF ((info IS Types.PVariable) & info.isReference()) THEN
            result := makeSimple(derefCode(e.code()), type);
        END;
    END;
    RETURN result
END;

PROCEDURE isTemporary*(e: Type): BOOLEAN;
    RETURN e.mInfo = NIL;
END;

END Expression.
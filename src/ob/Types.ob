MODULE Types;
IMPORT
    Context, Errors, JS, JsArray, JsMap, JsString, Object, ScopeBase;
CONST
    openArrayLength* = 0;

TYPE
    Id* = RECORD(Object.Type)
        PROCEDURE idType*(): JsString.Type
    END;

    PId* = POINTER TO Id;
    
    Type* = RECORD(Object.Type)
        PROCEDURE description*(): JsString.Type
    END;
    PType* = POINTER TO Type;

    StorageType* = RECORD(Type)    
        PROCEDURE initializer*(cx: Context.Type): JsString.Type
    END;

    TypeId* = RECORD(Id)
        PROCEDURE type*(): PType;
        PROCEDURE description(): JsString.Type;
        PROCEDURE strip();

        mType: PType
    END;
    PTypeId* = POINTER TO TypeId;

    ResolveTypeCallback = PROCEDURE(): PType;

    ForwardTypeId* = RECORD(TypeId)
        resolve: ResolveTypeCallback
    END;

    PForwardTypeId = POINTER TO ForwardTypeId;

    LazyTypeId = RECORD(TypeId)
    END;

    PLazyTypeId = POINTER TO LazyTypeId;

    Const* = RECORD(Id)
        type: PType;
        value: JS.var
    END;

    PConst* = POINTER TO Const;

    Variable* = RECORD(Id)
        PROCEDURE type*(): PType;
        PROCEDURE isReadOnly*(): BOOLEAN
    END;

    PVariable* = POINTER TO Variable;

    VariableImpl* = RECORD(Variable) (*TO FIX*)
        mType: PType
    END;
    PVariableImpl* = POINTER TO VariableImpl;

    ReadOnlyVariable = RECORD(VariableImpl)
    END;

    VariableRef* = RECORD(VariableImpl)
    END;

    PVariableRef* = POINTER TO VariableRef;

    ExportedVariable = RECORD(ReadOnlyVariable)
    END;

    PExportedVariable = POINTER TO ExportedVariable;

    ProcedureId* = RECORD(Id)
        type: PType
    END;

    PProcedureId* = POINTER TO ProcedureId;

    String* = RECORD(Type)
        s: JsString.Type
    END;

    PString* = POINTER TO String;

    NamedType* = RECORD(StorageType)
        name*: JsString.Type
    END;

    Array* = RECORD(NamedType)
        mInitializer: JsString.Type;
        elementsType: PType;
        len: INTEGER
    END;

    PArray* = POINTER TO Array;

    PRecord* = POINTER TO Record;

    Pointer* = RECORD(NamedType)
        base: PTypeId
    END;

    PPointer* = POINTER TO Pointer;

    Procedure* = RECORD(NamedType)
    END;
    PProcedure* = POINTER TO Procedure;

    DefinedProcedure* = RECORD(Procedure)
        PROCEDURE args*(): JsArray.Type;
        PROCEDURE result*(): PType
    END;
    PDefinedProcedure* = POINTER TO DefinedProcedure;

    ProcedureArgument* = RECORD (Object.Type)
        PROCEDURE description(): JsString.Type;

        type*: PType;
        isVar*: BOOLEAN
    END;

    PProcedureArgument* = POINTER TO ProcedureArgument;

    BasicType* = RECORD(NamedType)
        mInitializer: JsString.Type
    END;

    PBasicType* = POINTER TO BasicType;

    Field = RECORD
        id: PROCEDURE(): JsString.Type;
        exported: PROCEDURE(): BOOLEAN
    END;

    Record* = RECORD(NamedType)
        PROCEDURE addField(f: Field; type: PType);
        PROCEDURE findSymbol(id: JsString.Type): PType;
        PROCEDURE finalize();

        fields: JsMap.Type;
        base:   PRecord;
        cons:   JsString.Type;
        scope:  ScopeBase.PType;
        notExported: JsArray.Strings
    END;
    
    NonExportedRecord* = RECORD(Record)
    END;
    PNonExportedRecord* = POINTER TO NonExportedRecord;

    Nil = RECORD(Type)
    END;

    Module* = RECORD(Id)
        name: JsString.Type
    END;

    PModule* = POINTER TO Module;

VAR
    basic*: RECORD
        bool*, ch*, integer*, uint8*, real*, set*: PBasicType
    END;

    numeric*: JsArray.Type;
    nil*: POINTER TO Nil;

PROCEDURE TypeId.description(): JsString.Type;
VAR
    t: PType;
BEGIN
    t := SELF.type();
    RETURN JsString.concat(JsString.make("type "), t.description())
END TypeId.description;

PROCEDURE TypeId.type(): PType;
    RETURN SELF.mType
END TypeId.type;

PROCEDURE finalizeRecord(closure: Object.PType);
BEGIN
    closure(PRecord).finalize();
END finalizeRecord;

PROCEDURE Record.finalize();
VAR
    i: INTEGER;
BEGIN
    FOR i := 0 TO JsArray.stringsLen(SELF.notExported) - 1 DO
        JsMap.erase(SELF.fields, JsArray.stringsAt(SELF.notExported, i))
    END;
    SELF.notExported := NIL;
END Record.finalize;

PROCEDURE initRecord*(r: PRecord; name: JsString.Type; cons: JsString.Type; scope: ScopeBase.PType);
BEGIN
    r.name := name;
    r.cons := cons;
    r.scope := scope;
    r.fields := JsMap.make();
    r.notExported := JsArray.makeStrings();
    scope.addFinalizer(finalizeRecord, r);
END initRecord;

PROCEDURE makeNonExportedRecord(cons: JsString.Type; scope: ScopeBase.PType; base: PRecord): PNonExportedRecord;
VAR
    result: PNonExportedRecord;
BEGIN
    NEW(result);
    initRecord(result, NIL, cons, scope);
    result.base := base;
    RETURN result
END makeNonExportedRecord;    

PROCEDURE TypeId.strip();
VAR
    r: PRecord;
BEGIN
    IF SELF.mType IS PRecord THEN
        r := SELF.mType(PRecord);
        SELF.mType := makeNonExportedRecord(r.cons, r.scope, r.base);
    ELSE
        SELF.mType := NIL;
    END;
END TypeId.strip;

PROCEDURE makeForwardTypeId*(resolve: ResolveTypeCallback): PForwardTypeId;
VAR
    result: PForwardTypeId;
BEGIN
    NEW(result);
    result.resolve := resolve;
    RETURN result
END makeForwardTypeId;

PROCEDURE ForwardTypeId.type(): PType;
BEGIN
    IF SELF.mType = NIL THEN
        SELF.mType := SELF.resolve();
    END;
    RETURN SELF.mType
END ForwardTypeId.type;

PROCEDURE defineTypeId*(VAR tId: LazyTypeId; t: PType);
BEGIN
    tId.mType := t;
END defineTypeId;

PROCEDURE typeName*(type: NamedType): JsString.Type;
    RETURN type.name
END typeName;

PROCEDURE ProcedureId.idType(): JsString.Type;
    RETURN JsString.make("procedure")
END ProcedureId.idType;

PROCEDURE String.description(): JsString.Type;
VAR
    prefix: JsString.Type;
BEGIN
    IF JsString.len(SELF.s) = 1 THEN
        prefix := JsString.make("single-");
    ELSE
        prefix := JsString.make("multi-");
    END;
    RETURN JsString.concat(prefix, JsString.make("character string"))
END String.description;

PROCEDURE stringValue*(s: String): JsString.Type;
    RETURN s.s
END stringValue;

PROCEDURE stringLen*(s: String): INTEGER;
    RETURN JsString.len(s.s)
END stringLen;

PROCEDURE stringAsChar*(s: String; VAR c: CHAR): BOOLEAN;
VAR
    result: BOOLEAN;
BEGIN
    result := stringLen(s) = 1;
    IF result THEN
        c := JsString.at(s.s, 0);
    END;
    RETURN result
END stringAsChar;

PROCEDURE Const.idType(): JsString.Type;
    RETURN JsString.make("constant")
END Const.idType;

PROCEDURE constType*(c: Const): PType;
    RETURN c.type
END constType;

PROCEDURE constValue*(c: Const): JS.var;
    RETURN c.value
END constValue;

PROCEDURE Variable.idType(): JsString.Type;
    RETURN JsString.make("variable")
END Variable.idType;

PROCEDURE ReadOnlyVariable.idType(): JsString.Type;
    RETURN JsString.make("read-only variable")
END ReadOnlyVariable.idType;

PROCEDURE VariableImpl.type(): PType;
    RETURN SELF.mType
END VariableImpl.type;

PROCEDURE procedureType*(p: ProcedureId): PType;
    RETURN p.type
END procedureType;

PROCEDURE Variable.isReadOnly(): BOOLEAN;
    RETURN FALSE
END Variable.isReadOnly;

PROCEDURE ReadOnlyVariable.isReadOnly(): BOOLEAN;
    RETURN TRUE
END ReadOnlyVariable.isReadOnly;

PROCEDURE ExportedVariable.idType(): JsString.Type;
    RETURN JsString.make("imported variable")
END ExportedVariable.idType;

PROCEDURE TypeId.idType(): JsString.Type;
    RETURN JsString.make("type")
END TypeId.idType;

PROCEDURE BasicType.description(): JsString.Type;
    RETURN SELF.name
END BasicType.description;

PROCEDURE BasicType.initializer(cx: Context.Type): JsString.Type;
    RETURN SELF.mInitializer
END BasicType.initializer;
(*
PROCEDURE Nil.idType(): JsString.Type;
    RETURN JsString.make("NIL")
END Nil.idType;
*)
PROCEDURE Nil.description(): JsString.Type;
    RETURN JsString.make("NIL")
END Nil.description;

PROCEDURE isInt*(t: PType): BOOLEAN;
    RETURN (t = basic.integer) OR (t = basic.uint8)
END isInt;

PROCEDURE intsDescription*(): JsString.Type;
    RETURN JsString.make("'INTEGER' or 'BYTE'")
END intsDescription;

PROCEDURE isString*(t: PType): BOOLEAN;
    RETURN ((t^ IS Array) & (t^(Array).elementsType = basic.ch))
           OR (t^ IS String)
END isString;

PROCEDURE moduleName*(m: Module): JsString.Type;
    RETURN m.name
END moduleName;

PROCEDURE makeBasic*(name: ARRAY OF CHAR; initializer: ARRAY OF CHAR): PBasicType;
VAR
    result: PBasicType;
BEGIN
    NEW(result);
    result.name := JsString.make(name);
    result.mInitializer := JsString.make(initializer);
    RETURN result
END makeBasic;
(*
PROCEDURE Record.idType(): JsString.Type;
    RETURN JsString.make("record")
END Record.idType;
*)
PROCEDURE Record.description(): JsString.Type;
VAR
    result: JsString.Type;
BEGIN
    IF SELF.name # NIL THEN
        result := SELF.name;
    ELSE
        result := JsString.make("anonymous RECORD");
    END;
    RETURN result
END Record.description;

PROCEDURE Record.initializer(cx: Context.Type): JsString.Type;
    RETURN JsString.concat(JsString.concat(JsString.concat(
        JsString.make("new "), 
        cx.qualifyScope(SELF.scope)), 
        SELF.cons), 
        JsString.make("()"))
END Record.initializer;

PROCEDURE Record.addField(f: Field; type: PType);
BEGIN
    IF JsMap.has(SELF.fields, f.id()) THEN
        Errors.raise(JsString.concat(JsString.concat(
            JsString.make("duplicated field: '"), 
            f.id()), 
            JsString.make("'")));
    END;
    IF (SELF.base # NIL) & (SELF.base.findSymbol(f.id()) # NIL) THEN
        Errors.raise(JsString.concat(JsString.concat(
            JsString.make("base record already has field: '"),
            f.id()),
            JsString.make("'")));
    END;
    JsMap.put(SELF.fields, f.id(), type);
    IF ~f.exported() THEN
        JsArray.addString(SELF.notExported, f.id());
    END;
END Record.addField;

PROCEDURE Record.findSymbol(id: JsString.Type): PType;
VAR
    result: PType;
BEGIN
    IF ~JsMap.find(SELF.fields, id, result) & (SELF.base # NIL) THEN
        result := SELF.base.findSymbol(id);
    END;
    RETURN result
END Record.findSymbol;

PROCEDURE recordBase*(r: Record): PRecord;
    RETURN r.base
END recordBase;

PROCEDURE setRecordBase*(r: Record; type: PRecord);
BEGIN
    r.base := type;
END setRecordBase;

PROCEDURE recordScope*(r: Record): ScopeBase.PType;
    RETURN r.scope
END recordScope;

PROCEDURE recordConstructor*(r: Record): JsString.Type;
    RETURN r.cons
END recordConstructor;

PROCEDURE recordOwnFields*(r: Record): JsMap.Type;
    RETURN r.fields
END recordOwnFields;
(*
PROCEDURE Pointer.idType(): JsString.Type;
    RETURN JsString.make("pointer")
END Pointer.idType;
*)
PROCEDURE pointerBase*(p: Pointer): PRecord;
VAR
    result: PType;
BEGIN
    result := p.base.type();
    RETURN result(PRecord)
END pointerBase;

PROCEDURE Pointer.description(): JsString.Type;
VAR
    base: PRecord;
    result: JsString.Type;
BEGIN
    IF SELF.name # NIL THEN
        result := SELF.name;
    ELSE
        base := pointerBase(SELF);
        result := JsString.concat(JsString.make("POINTER TO "), base.description());
    END;
    RETURN result
END Pointer.description;

PROCEDURE Pointer.initializer(cx: Context.Type): JsString.Type;
    RETURN JsString.make("null")
END Pointer.initializer;
(*
PROCEDURE Array.idType(): JsString.Type;
    RETURN JsString.make("array")
END Array.idType;
*)
PROCEDURE foldArrayDimensions(a: Array; VAR sizes, of: JsString.Type);
BEGIN  
    IF (a.len # openArrayLength) & (a.elementsType IS PArray) THEN
        foldArrayDimensions(a.elementsType^(Array), sizes, of);
        sizes := JsString.concat(JsString.concat(
            JsString.fromInt(a.len),
            JsString.make(", ")),
            sizes);
    ELSE
        IF a.len # openArrayLength THEN
            sizes := JsString.fromInt(a.len);
        END;
        of := a.elementsType.description();
    END
END foldArrayDimensions;

PROCEDURE Array.description(): JsString.Type;
VAR
    result: JsString.Type;
    sizes, of: JsString.Type;
BEGIN
    IF SELF.elementsType = NIL THEN (* special arrays, see procedure "LEN" *)
        result := SELF.name;
    ELSE
        foldArrayDimensions(SELF, sizes, of);
        IF sizes = NIL THEN
            sizes := JsString.make("");
        ELSE
            sizes := JsString.concat(JsString.make(" "), sizes);
        END;
        result := JsString.concat(JsString.concat(JsString.concat(
            JsString.make("ARRAY"),
            sizes),
            JsString.make(" OF ")),
            of);
    END;
    RETURN result
END Array.description;

PROCEDURE Array.initializer(cx: Context.Type): JsString.Type;
    RETURN SELF.mInitializer
END Array.initializer;

PROCEDURE arrayElementsType*(a: Array): PType;
    RETURN a.elementsType
END arrayElementsType;

PROCEDURE arrayLength*(a: Array): INTEGER;
    RETURN a.len
END arrayLength;
(*
PROCEDURE String.initializer(cx: Context.Type): JsString.Type;
    RETURN JsString.make("null")
END String.initializer;
*)
PROCEDURE Procedure.initializer(cx: Context.Type): JsString.Type;
    RETURN JsString.make("null")
END Procedure.initializer;

PROCEDURE Procedure.description(): JsString.Type;
    RETURN SELF.name
END Procedure.description;

PROCEDURE ProcedureArgument.description(): JsString.Type;
VAR
    result: JsString.Type;
BEGIN
    IF SELF.isVar THEN
        result := JsString.make("VAR ");
    ELSE
        result := JsString.makeEmpty();
    END;
    RETURN JsString.concat(result, SELF.type.description())
END ProcedureArgument.description;

PROCEDURE makeProcedureArgument*(type: PType; isVar: BOOLEAN): PProcedureArgument;
VAR
    result: PProcedureArgument;
BEGIN
    NEW(result);
    result.type := type;
    result.isVar := isVar;
    RETURN result
END makeProcedureArgument;

PROCEDURE Module.idType(): JsString.Type;
    RETURN JsString.make("MODULE")
END Module.idType;

PROCEDURE makeTypeId*(type: PType): PTypeId;
VAR
    result: PTypeId;
BEGIN
    NEW(result);
    result.mType := type;
    RETURN result
END makeTypeId;

PROCEDURE makeLazyTypeId*(): PLazyTypeId;
VAR
    result: PLazyTypeId;
BEGIN
    NEW(result);
    RETURN result
END makeLazyTypeId;

PROCEDURE makeString*(s: JsString.Type): PString;
VAR
    result: PString;
BEGIN
    NEW(result);
    result.s := s;
    RETURN result
END makeString;

PROCEDURE makeArray*(
    name: JsString.Type;
    initializer: JsString.Type;
    elementsType: PType;
    len: INTEGER (* see openArrayLength *)
    ): PArray;
VAR
    result: PArray;
BEGIN
    NEW(result);
    result.name := name;
    result.mInitializer := initializer;
    result.elementsType := elementsType;
    result.len := len;
    RETURN result
END makeArray;

PROCEDURE makePointer*(name: JsString.Type; base: PTypeId): PPointer;
VAR
    result: PPointer;
BEGIN
    NEW(result);
    result.name := name;
    result.base := base;
    RETURN result
END makePointer;

PROCEDURE makeRecord*(name: JsString.Type; cons: JsString.Type; scope: ScopeBase.PType): PRecord;
VAR
    result: PRecord;
BEGIN
    NEW(result);
    initRecord(result, name, cons, scope);
    RETURN result
END makeRecord;

PROCEDURE makeConst*(type: PType; value: JS.var): PConst;
VAR
    result: PConst;
BEGIN
    NEW(result);
    result.type := type;
    result.value := value;
    RETURN result
END makeConst;

PROCEDURE makeVariable*(type: PType; readOnly: BOOLEAN): PVariable;
VAR
    result: PVariableImpl;

    PROCEDURE make(): PVariableImpl;
    VAR
        result: PVariableImpl;
    BEGIN
        NEW(result);
        RETURN result
    END make;

    PROCEDURE makeRO(): PVariableImpl;
    VAR
        result: POINTER TO ReadOnlyVariable;
    BEGIN
        NEW(result);
        RETURN result
    END makeRO;
BEGIN
    IF readOnly THEN
        result := makeRO();
    ELSE
        result := make();
    END;
    result.mType := type;
    RETURN result
END makeVariable;

PROCEDURE makeVariableRef*(type: PType): PVariableRef;
VAR
    result: PVariableRef;
BEGIN
    NEW(result);
    result.mType := type;
    RETURN result
END makeVariableRef;

PROCEDURE makeExportedVariable*(v: Variable): PExportedVariable;
VAR
    result: PExportedVariable;
BEGIN
    NEW(result);
    result.mType := v.type();
    RETURN result
END makeExportedVariable;

PROCEDURE makeProcedure*(type: PType): PProcedureId;
VAR
    result: PProcedureId;
BEGIN
    NEW(result);
    result.type := type;
    RETURN result
END makeProcedure;

PROCEDURE initProcedure*(p: Procedure; name: JsString.Type);
BEGIN
    p.name := name;
END initProcedure;

PROCEDURE initModule*(m: Module; name: JsString.Type);
BEGIN
    m.name := name;
END initModule;

BEGIN
    basic.bool := makeBasic("BOOLEAN", "false");
    basic.ch := makeBasic("CHAR", "0");
    basic.integer := makeBasic("INTEGER", "0");
    basic.uint8 := makeBasic("BYTE", "0");
    basic.real := makeBasic("REAL", "0");
    basic.set := makeBasic("SET", "0");

    numeric := JsArray.make();
    JsArray.add(numeric, basic.integer);
    JsArray.add(numeric, basic.uint8);
    JsArray.add(numeric, basic.real);

    NEW(nil);
END Types.

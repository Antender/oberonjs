MODULE Types;
IMPORT
    Context, Errors, JS, JsMap, Object, ScopeBase, Str := String;

TYPE
    Id* = RECORD(Object.Type)
        PROCEDURE idType*(): STRING
    END;

    PId* = POINTER TO Id;
    
    Type* = RECORD(Object.Type)
        PROCEDURE description*(): STRING
    END;
    PType* = POINTER TO Type;

    StorageType* = RECORD(Type)    
        PROCEDURE initializer*(cx: Context.Type; forNew: BOOLEAN; code: STRING): STRING
    END;
    PStorageType* = POINTER TO StorageType;

    TypeId* = RECORD(Id)
        PROCEDURE type*(): PType;
        PROCEDURE description(): STRING;
        PROCEDURE strip();

        mType: PType
    END;
    PTypeId* = POINTER TO TypeId;

    ResolveTypeCallback = PROCEDURE(): PType;

    ForwardTypeId* = RECORD(TypeId)
        resolve: ResolveTypeCallback
    END;

    PForwardTypeId = POINTER TO ForwardTypeId;

    LazyTypeId = RECORD(TypeId)
    END;

    PLazyTypeId = POINTER TO LazyTypeId;

    Const* = RECORD(Id)
        type: PType;
        value: JS.var
    END;

    PConst* = POINTER TO Const;

    Variable* = RECORD(Id)
        PROCEDURE type*(): PType;
        PROCEDURE isReadOnly*(): BOOLEAN;
        PROCEDURE isReference*(): BOOLEAN
    END;

    PVariable* = POINTER TO Variable;

    VariableImpl = RECORD(Variable)
        mType: PType;
        mRef: BOOLEAN
    END;
    PVariableImpl = POINTER TO VariableImpl;

    ReadOnlyVariable = RECORD(VariableImpl)
    END;

    ExportedVariable = RECORD(ReadOnlyVariable)
    END;

    PExportedVariable = POINTER TO ExportedVariable;

    ProcedureId* = RECORD(Id)
        type*: PType
    END;

    PProcedureId* = POINTER TO ProcedureId;

    String* = RECORD(Type)
        s-: STRING
    END;

    PString* = POINTER TO String;

    Field* = RECORD(Object.Type)
        PROCEDURE id*(): STRING;
        PROCEDURE exported*(): BOOLEAN;
        PROCEDURE type*(): PType;
        PROCEDURE asVar*(isReadOnly: BOOLEAN; cx: Context.Type): PId;
    END;
    PField* = POINTER TO Field;

    RecordField* = RECORD(Field)
        PROCEDURE identdef*(): Context.PIdentdefInfo;

        mIdentdef: Context.PIdentdefInfo;
        mType: PType;
    END;
    PRecordField* = POINTER TO RecordField;

    NamedType* = RECORD(StorageType)
        PROCEDURE denote*(id: STRING): PField;

        name*: STRING
    END;

    Array* = RECORD(NamedType)
        elementsType-: PType
    END;
    PArray* = POINTER TO Array;

    OpenArray* = RECORD(Array)
    END;
    POpenArray* = POINTER TO OpenArray;

    StaticArray* = RECORD(Array)
        PROCEDURE length*(): INTEGER;

        mInitializer: STRING;
        len: INTEGER
    END;
    PStaticArray* = POINTER TO StaticArray;

    PRecord* = POINTER TO Record;

    Pointer* = RECORD(NamedType)
        base: PTypeId
    END;

    PPointer* = POINTER TO Pointer;

    Procedure* = RECORD(NamedType)
        PROCEDURE designatorCode*(id: STRING): STRING
    END;
    PProcedure* = POINTER TO Procedure;

    ProcedureArgument* = RECORD (Object.Type)
        PROCEDURE description(): STRING;

        type*: PType;
        isVar*: BOOLEAN
    END;

    PProcedureArgument* = POINTER TO ProcedureArgument;
    ProcedureArguments* = ARRAY * OF PProcedureArgument;

    DefinedProcedure* = RECORD(Procedure)
        PROCEDURE args*(): ProcedureArguments;
        PROCEDURE result*(): PType
    END;
    PDefinedProcedure* = POINTER TO DefinedProcedure;

    BasicType* = RECORD(NamedType)
        mInitializer: STRING
    END;

    PBasicType* = POINTER TO BasicType;

    Record* = RECORD(NamedType)
        PROCEDURE addField*(f: PField);
        PROCEDURE findSymbol*(id: STRING): PField;
        PROCEDURE finalize*();

        fields: JsMap.Type;
        base-:  PRecord;
        cons-:  STRING;
        scope-: ScopeBase.PType;
        notExported: ARRAY * OF STRING
    END;
    
    NonExportedRecord* = RECORD(Record)
    END;
    PNonExportedRecord* = POINTER TO NonExportedRecord;

    Nil = RECORD(Type)
    END;

    Module* = RECORD(Id)
        name: STRING
    END;

    PModule* = POINTER TO Module;

    ArrayDimensionDescriptionCallback = PROCEDURE(VAR a: Array): STRING;

VAR
    basic*: RECORD
        bool*, ch*, integer*, uint8*, real*, set*: PBasicType
    END;

    numeric*: ARRAY * OF PType;
    nil*: POINTER TO Nil;

PROCEDURE TypeId.description(): STRING;
VAR
    t: PType;
BEGIN
    t := SELF.type();
    RETURN "type " + t.description()
END TypeId.description;

PROCEDURE TypeId.type(): PType;
    RETURN SELF.mType
END TypeId.type;

PROCEDURE finalizeRecord(closure: Object.PType);
BEGIN
    closure(PRecord).finalize();
END finalizeRecord;

PROCEDURE Record.finalize();
BEGIN
    FOR i <- 0 TO LEN(SELF.notExported) - 1 DO
        JsMap.erase(SELF.fields, SELF.notExported[i])
    END;
    SELF.notExported.clear();
END Record.finalize;

PROCEDURE initRecord*(r: PRecord; name: STRING; cons: STRING; scope: ScopeBase.PType);
BEGIN
    r.name := name;
    r.cons := cons;
    r.scope := scope;
    r.fields := JsMap.make();
    scope.addFinalizer(finalizeRecord, r);
END initRecord;

PROCEDURE makeNonExportedRecord(cons: STRING; scope: ScopeBase.PType; base: PRecord): PNonExportedRecord;
VAR
    result: PNonExportedRecord;
BEGIN
    NEW(result);
    initRecord(result, "", cons, scope);
    result.base := base;
    RETURN result
END makeNonExportedRecord;    

PROCEDURE TypeId.strip();
VAR
    r: PRecord;
BEGIN
    IF SELF.mType IS PRecord THEN
        r := SELF.mType(PRecord);
        SELF.mType := makeNonExportedRecord(r.cons, r.scope, r.base);
    ELSE
        SELF.mType := NIL;
    END;
END TypeId.strip;

PROCEDURE makeForwardTypeId*(resolve: ResolveTypeCallback): PForwardTypeId;
VAR
    result: PForwardTypeId;
BEGIN
    NEW(result);
    result.resolve := resolve;
    RETURN result
END makeForwardTypeId;

PROCEDURE ForwardTypeId.type(): PType;
BEGIN
    IF SELF.mType = NIL THEN
        SELF.mType := SELF.resolve();
    END;
    RETURN SELF.mType
END ForwardTypeId.type;

PROCEDURE defineTypeId*(VAR tId: LazyTypeId; t: PType);
BEGIN
    tId.mType := t;
END defineTypeId;

PROCEDURE typeName*(type: NamedType): STRING;
    RETURN type.name
END typeName;

PROCEDURE ProcedureId.idType(): STRING;
    RETURN "procedure"
END ProcedureId.idType;

PROCEDURE String.description(): STRING;
VAR
    prefix: STRING;
BEGIN
    IF LEN(SELF.s) = 1 THEN
        prefix := "single-";
    ELSE
        prefix := "multi-";
    END;
    RETURN prefix + "character string"
END String.description;

PROCEDURE stringValue*(s: String): STRING;
    RETURN s.s
END stringValue;

PROCEDURE stringLen*(s: String): INTEGER;
    RETURN LEN(s.s)
END stringLen;

PROCEDURE stringAsChar*(s: String; VAR c: CHAR): BOOLEAN;
VAR
    result: BOOLEAN;
BEGIN
    result := stringLen(s) = 1;
    IF result THEN
        c := s.s[0];
    END;
    RETURN result
END stringAsChar;

PROCEDURE Const.idType(): STRING;
    RETURN "constant"
END Const.idType;

PROCEDURE constType*(c: Const): PType;
    RETURN c.type
END constType;

PROCEDURE constValue*(c: Const): JS.var;
    RETURN c.value
END constValue;

PROCEDURE Variable.idType(): STRING;
    RETURN "variable"
END Variable.idType;

PROCEDURE ReadOnlyVariable.idType(): STRING;
    RETURN "read-only variable"
END ReadOnlyVariable.idType;

PROCEDURE VariableImpl.type(): PType;
    RETURN SELF.mType
END VariableImpl.type;

PROCEDURE VariableImpl.isReference(): BOOLEAN;
    RETURN SELF.mRef
END VariableImpl.isReference;

PROCEDURE procedureType*(p: ProcedureId): PType;
    RETURN p.type
END procedureType;

PROCEDURE Variable.isReadOnly(): BOOLEAN;
    RETURN FALSE
END Variable.isReadOnly;

PROCEDURE ReadOnlyVariable.isReadOnly(): BOOLEAN;
    RETURN TRUE
END ReadOnlyVariable.isReadOnly;

PROCEDURE ExportedVariable.idType(): STRING;
    RETURN "imported variable"
END ExportedVariable.idType;

PROCEDURE TypeId.idType(): STRING;
    RETURN "type"
END TypeId.idType;

PROCEDURE BasicType.description(): STRING;
    RETURN SELF.name
END BasicType.description;

PROCEDURE BasicType.initializer(cx: Context.Type; forNew: BOOLEAN; code: STRING): STRING;
    RETURN SELF.mInitializer
END BasicType.initializer;

PROCEDURE Nil.description(): STRING;
    RETURN "NIL"
END Nil.description;

PROCEDURE isInt*(t: PType): BOOLEAN;
    RETURN (t = basic.integer) OR (t = basic.uint8)
END isInt;

PROCEDURE intsDescription*(): STRING;
    RETURN "'INTEGER' or 'BYTE'"
END intsDescription;

PROCEDURE isString*(t: PType): BOOLEAN;
    RETURN ((t IS PArray) & (t.elementsType = basic.ch))
           OR (t^ IS String)
END isString;

PROCEDURE moduleName*(m: Module): STRING;
    RETURN m.name
END moduleName;

PROCEDURE makeBasic*(name: STRING; initializer: STRING): PBasicType;
VAR
    result: PBasicType;
BEGIN
    NEW(result);
    result.name := name;
    result.mInitializer := initializer;
    RETURN result
END makeBasic;

PROCEDURE Record.description(): STRING;
VAR
    result: STRING;
BEGIN
    IF LEN(SELF.name) # 0 THEN
        result := SELF.name;
    ELSE
        result := "anonymous RECORD";
    END;
    RETURN result
END Record.description;

PROCEDURE Record.initializer(cx: Context.Type; forNew: BOOLEAN; code: STRING): STRING;
    RETURN "new " + cx.qualifyScope(SELF.scope) + SELF.cons + "(" + code + ")"
END Record.initializer;

PROCEDURE Record.addField(f: PField);
BEGIN
    IF JsMap.has(SELF.fields, f.id()) THEN
        Errors.raise("duplicated field: '" + f.id() + "'");
    END;
    IF (SELF.base # NIL) & (SELF.base.findSymbol(f.id()) # NIL) THEN
        Errors.raise("base record already has field: '" + f.id() + "'");
    END;
    JsMap.put(SELF.fields, f.id(), f);
    IF ~f.exported() THEN
        SELF.notExported.add(f.id());
    END;
END Record.addField;

PROCEDURE Record.findSymbol(id: STRING): PField;
VAR
    result: Object.PType;
BEGIN
    IF ~JsMap.find(SELF.fields, id, result) & (SELF.base # NIL) THEN
        result := SELF.base.findSymbol(id);
    END;
    RETURN result(PField)
END Record.findSymbol;

PROCEDURE existingField(r: Record; id: STRING; d: NamedType): PField;
BEGIN
    result <- r.findSymbol(id);
    IF result = NIL THEN
        Errors.raise("type '" + d.description() + "' has no '" + id + "' field");
    END;
    RETURN result
END existingField;

PROCEDURE Record.denote(id: STRING): PField;
BEGIN
    RETURN existingField(SELF, id, SELF)
END Record.denote;

PROCEDURE recordBase*(r: Record): PRecord;
    RETURN r.base
END recordBase;

PROCEDURE setRecordBase*(VAR r: Record; type: PRecord);
BEGIN
    r.base := type;
END setRecordBase;

PROCEDURE recordScope*(r: Record): ScopeBase.PType;
    RETURN r.scope
END recordScope;

PROCEDURE recordConstructor*(r: Record): STRING;
    RETURN r.cons
END recordConstructor;

PROCEDURE recordOwnFields*(r: Record): JsMap.Type;
    RETURN r.fields
END recordOwnFields;

PROCEDURE pointerBase*(p: Pointer): PRecord;
VAR
    result: PType;
BEGIN
    result := p.base.type();
    RETURN result(PRecord)
END pointerBase;

PROCEDURE Pointer.description(): STRING;
VAR
    base: PRecord;
    result: STRING;
BEGIN
    IF LEN(SELF.name) # 0 THEN
        result := SELF.name;
    ELSE
        base := pointerBase(SELF);
        result := "POINTER TO " + base.description();
    END;
    RETURN result
END Pointer.description;

PROCEDURE Pointer.initializer(cx: Context.Type; forNew: BOOLEAN; code: STRING): STRING;
    RETURN "null"
END Pointer.initializer;

PROCEDURE Pointer.denote(id: STRING): PField;
VAR
    d: POINTER TO NamedType;
BEGIN
    base <- pointerBase(SELF);
    IF (LEN(SELF.name) = 0) OR (LEN(base.name) # 0) THEN
        d := base;
    ELSE
        d := SELF(POINTER);
    END;
    RETURN existingField(base^, id, d^)
END Pointer.denote;

PROCEDURE foldArrayDimensions(VAR a: Array; dimToStr: ArrayDimensionDescriptionCallback; VAR sizes, of: STRING);
BEGIN  
    elementsType <- a.elementsType;
    IF ~(a IS OpenArray) & (elementsType IS PArray) THEN
        foldArrayDimensions(elementsType^, dimToStr, sizes, of);
        sizes := dimToStr(a) + ", " + sizes;
    ELSE
        sizes := dimToStr(a);
        of := a.elementsType.description();
    END
END foldArrayDimensions;

PROCEDURE arrayDimensionDescription*(VAR a: Array): STRING;
VAR
    result: STRING;
BEGIN
    IF a IS StaticArray THEN
        result := Str.fromInt(a.length());
    END;
    RETURN result
END arrayDimensionDescription;

PROCEDURE arrayDescription*(VAR a: Array; dimToStr: ArrayDimensionDescriptionCallback): STRING;
VAR
    result: STRING;
    sizes, of: STRING;
BEGIN
    IF a.elementsType = NIL THEN (* special arrays, see procedure "LEN" *)
        result := a.name;
    ELSE
        foldArrayDimensions(a, dimToStr, sizes, of);
        IF LEN(sizes) # 0 THEN
            sizes := " " + sizes;
        END;
        result := "ARRAY" + sizes + " OF " + of;
    END;
    RETURN result
END arrayDescription;

PROCEDURE Array.description(): STRING;
    RETURN arrayDescription(SELF, arrayDimensionDescription)
END Array.description;

PROCEDURE NamedType.denote(id: STRING): PField;
BEGIN
    Errors.raise("selector '." + id + "' cannot be applied to '" 
               + SELF.description() + "'");
    RETURN NIL
END NamedType.denote;

PROCEDURE OpenArray.initializer(cx: Context.Type; forNew: BOOLEAN; code: STRING): STRING;
    RETURN ""
END OpenArray.initializer;

PROCEDURE StaticArray.initializer(cx: Context.Type; forNew: BOOLEAN; code: STRING): STRING;
    RETURN SELF.mInitializer
END StaticArray.initializer;

PROCEDURE arrayElementsType*(a: Array): PType;
    RETURN a.elementsType
END arrayElementsType;

PROCEDURE arrayBaseElementsType*(a: Array): PType;
VAR
    result: PType;
BEGIN
    result := a.elementsType;
    WHILE result IS PArray DO
        result := result(PArray).elementsType;
    END;
    RETURN result
END arrayBaseElementsType;

PROCEDURE isScalar*(VAR t: Type): BOOLEAN;
    RETURN ~(t IS Array) & ~(t IS Record) 
END isScalar;

PROCEDURE StaticArray.length(): INTEGER;
    RETURN SELF.len
END StaticArray.length;

PROCEDURE Procedure.initializer(cx: Context.Type; forNew: BOOLEAN; code: STRING): STRING;
    RETURN "null"
END Procedure.initializer;

PROCEDURE Procedure.description(): STRING;
    RETURN SELF.name
END Procedure.description;

PROCEDURE DefinedProcedure.designatorCode(id: STRING): STRING;
    RETURN id
END DefinedProcedure.designatorCode;

PROCEDURE ProcedureArgument.description(): STRING;
VAR
    result: STRING;
BEGIN
    IF SELF.isVar THEN
        result := "VAR ";
    END;
    RETURN result + SELF.type.description()
END ProcedureArgument.description;

PROCEDURE makeProcedureArgument*(type: PType; isVar: BOOLEAN): PProcedureArgument;
VAR
    result: PProcedureArgument;
BEGIN
    NEW(result);
    result.type := type;
    result.isVar := isVar;
    RETURN result
END makeProcedureArgument;

PROCEDURE Module.idType(): STRING;
    RETURN "MODULE"
END Module.idType;

PROCEDURE makeTypeId*(type: PType): PTypeId;
VAR
    result: PTypeId;
BEGIN
    NEW(result);
    result.mType := type;
    RETURN result
END makeTypeId;

PROCEDURE makeLazyTypeId*(): PLazyTypeId;
VAR
    result: PLazyTypeId;
BEGIN
    NEW(result);
    RETURN result
END makeLazyTypeId;

PROCEDURE makeString*(s: STRING): PString;
VAR
    result: PString;
BEGIN
    NEW(result);
    result.s := s;
    RETURN result
END makeString;

PROCEDURE initArray*(elementsType: PType; VAR result: Array);
BEGIN
    result.elementsType := elementsType;
END initArray;

PROCEDURE makeOpenArray*(elementsType: PType): PArray;
VAR
    result: POpenArray;
BEGIN
    NEW(result);
    initArray(elementsType, result^);
    RETURN result
END makeOpenArray;

PROCEDURE initStaticArray*(
    initializer: STRING;
    elementsType: PType;
    len: INTEGER;
    VAR result: StaticArray
    );
BEGIN
    initArray(elementsType, result);
    result.mInitializer := initializer;
    result.len := len;
END initStaticArray;

PROCEDURE makeStaticArray*(
    initializer: STRING;
    elementsType: PType;
    len: INTEGER
    ): PArray;
VAR
    result: PStaticArray;
BEGIN
    NEW(result);
    initStaticArray(initializer, elementsType, len, result^);
    RETURN result
END makeStaticArray;

PROCEDURE makePointer*(name: STRING; base: PTypeId): PPointer;
VAR
    result: PPointer;
BEGIN
    NEW(result);
    result.name := name;
    result.base := base;
    RETURN result
END makePointer;

PROCEDURE makeRecord*(name: STRING; cons: STRING; scope: ScopeBase.PType): PRecord;
VAR
    result: PRecord;
BEGIN
    NEW(result);
    initRecord(result, name, cons, scope);
    RETURN result
END makeRecord;

PROCEDURE makeConst*(type: PType; value: JS.var): PConst;
VAR
    result: PConst;
BEGIN
    NEW(result);
    result.type := type;
    result.value := value;
    RETURN result
END makeConst;

PROCEDURE makeVariable*(type: PType; readOnly: BOOLEAN): PVariable;
VAR
    result: PVariableImpl;

    PROCEDURE make(): PVariableImpl;
    VAR
        result: PVariableImpl;
    BEGIN
        NEW(result);
        RETURN result
    END make;

    PROCEDURE makeRO(): PVariableImpl;
    VAR
        result: POINTER TO ReadOnlyVariable;
    BEGIN
        NEW(result);
        RETURN result
    END makeRO;
BEGIN
    IF readOnly THEN
        result := makeRO();
    ELSE
        result := make();
    END;
    result.mType := type;
    RETURN result
END makeVariable;

PROCEDURE makeVariableRef*(type: PType): PVariable;
VAR
    result: PVariableImpl;
BEGIN
    NEW(result);
    result.mType := type;
    result.mRef := TRUE;
    RETURN result
END makeVariableRef;

PROCEDURE makeExportedVariable*(v: Variable): PExportedVariable;
VAR
    result: PExportedVariable;
BEGIN
    NEW(result);
    result.mType := v.type();
    RETURN result
END makeExportedVariable;

PROCEDURE makeProcedure*(type: PType): PProcedureId;
VAR
    result: PProcedureId;
BEGIN
    NEW(result);
    result.type := type;
    RETURN result
END makeProcedure;

PROCEDURE initProcedure*(VAR p: Procedure; name: STRING);
BEGIN
    p.name := name;
END initProcedure;

PROCEDURE initModule*(VAR m: Module; name: STRING);
BEGIN
    m.name := name;
END initModule;

PROCEDURE RecordField.id(): STRING;
    RETURN SELF.mIdentdef.id();
END;

PROCEDURE RecordField.exported(): BOOLEAN;
    RETURN SELF.mIdentdef.exported();
END;

PROCEDURE RecordField.identdef(): Context.PIdentdefInfo;
    RETURN SELF.mIdentdef;
END;

PROCEDURE RecordField.type(): PType;
    RETURN SELF.mType;
END;

PROCEDURE RecordField.asVar(isReadOnly: BOOLEAN; cx: Context.Type): PId;
    RETURN makeVariable(SELF.mType, isReadOnly);
END;

PROCEDURE initRecordField*(identdef: Context.PIdentdefInfo; type: PType; VAR result: RecordField);
BEGIN
    result.mIdentdef := identdef;
    result.mType := type;
END;

PROCEDURE makeRecordField*(identdef: Context.PIdentdefInfo; type: PType): PRecordField;
VAR
    result: PRecordField;
BEGIN
    NEW(result);
    initRecordField(identdef, type, result^);
    RETURN result;
END;

PROCEDURE mangleJSProperty*(id: STRING): STRING;
BEGIN
    result <- id;
    IF (id = "constructor") OR (id = "prototype") THEN
        result := result + "$";
    END;
    RETURN result;
END;

PROCEDURE mangleField*(id: STRING; type: PType): STRING;
BEGIN
    result <- id;
    IF isScalar(type^) 
        OR ((type IS PArray)
            & isScalar(arrayBaseElementsType(type^)^)) THEN
        result := mangleJSProperty(result);
    ELSE
        result := "$" + result;
    END;
    RETURN result;
END;

BEGIN
    basic.bool := makeBasic("BOOLEAN", "false");
    basic.ch := makeBasic("CHAR", "0");
    basic.integer := makeBasic("INTEGER", "0");
    basic.uint8 := makeBasic("BYTE", "0");
    basic.real := makeBasic("REAL", "0");
    basic.set := makeBasic("SET", "0");

    numeric.add(basic.integer);
    numeric.add(basic.uint8);
    numeric.add(basic.real);

    NEW(nil);
END Types.

MODULE Types;
IMPORT
    Chars, ConstValue, Context, Errors, OberonRtl, Object, Str := String;
TYPE
    Id* = RECORD(Object.Type)
        PROCEDURE idType*(): STRING
    END;

    PId* = POINTER TO Id;
    
    Type* = RECORD(Object.Type)
        PROCEDURE description*(): STRING
    END;
    PType* = POINTER TO Type;

    Const* = RECORD(Id)
        PROCEDURE Const*(type: PType; value: ConstValue.PType);

        type: PType;
        value-: ConstValue.PType;
    END;

    PConst* = POINTER TO Const;

    PStorageType* = POINTER TO StorageType;

    Variable* = RECORD(Id)
        PROCEDURE type*(): PStorageType;
        PROCEDURE isReadOnly*(): BOOLEAN;
        PROCEDURE isReference*(): BOOLEAN;
        PROCEDURE referenceCode*(): STRING;
    END;

    PVariable* = POINTER TO Variable;

    ProcedureId* = RECORD(Id)
        PROCEDURE ProcedureId*(type: PType);

        type*: PType
    END;

    PProcedureId* = POINTER TO ProcedureId;

    String* = RECORD(Type)
        PROCEDURE String*(s: STRING);

        s-: STRING
    END;

    PString* = POINTER TO String;

    FieldCode* = RECORD
        PROCEDURE FieldCode*(code, derefCode, propCode: STRING);

        code, derefCode, propCode: STRING;
    END;
    PFieldCode* = POINTER TO FieldCode;

    Field* = RECORD(Object.Type)
        PROCEDURE id*(): STRING;
        PROCEDURE exported*(): BOOLEAN;
        PROCEDURE type*(): PType;
        PROCEDURE asVar*(leadCode: STRING; isReadOnly: BOOLEAN; cx: Context.Type): PId;
        PROCEDURE designatorCode*(leadCode: STRING; cx: Context.Type): PFieldCode;
    END;
    PField* = POINTER TO Field;

    StorageType* = RECORD(Type)    
        PROCEDURE initializer*(cx: Context.Type): STRING;
        PROCEDURE denote*(id: STRING; isReadObly: BOOLEAN): PField;
        PROCEDURE isScalar*(): BOOLEAN;
    END;

    NamedType* = RECORD(StorageType)
        PROCEDURE NamedType*(name: STRING);

        name*: STRING
    END;

    Record* = RECORD(NamedType)
    END;
    PRecord* = POINTER TO Record;

    Array* = RECORD(NamedType)
        PROCEDURE Array*(elementsType: PStorageType);

        elementsType-: PStorageType
    END;
    PArray* = POINTER TO Array;

    OpenArray* = RECORD(Array)
    END;
    POpenArray* = POINTER TO OpenArray;

    StaticArray* = RECORD(Array)
        PROCEDURE StaticArray*(initializer: STRING; elementsType: PStorageType; len: INTEGER); 

        PROCEDURE length*(): INTEGER;

        mInitializer: STRING;
        len: INTEGER
    END;
    PStaticArray* = POINTER TO StaticArray;

    Procedure* = RECORD(NamedType)
        PROCEDURE designatorCode*(id: STRING): STRING
    END;
    PProcedure* = POINTER TO Procedure;

    ProcedureArgument* = RECORD (Object.Type)
        PROCEDURE ProcedureArgument*(type: PType; isVar: BOOLEAN);

        PROCEDURE description(): STRING;

        type*: PType;
        isVar*: BOOLEAN
    END;

    PProcedureArgument* = POINTER TO ProcedureArgument;
    ProcedureArguments* = ARRAY * OF PProcedureArgument;

    DefinedProcedure* = RECORD(Procedure)
        PROCEDURE args*(): ProcedureArguments;
        PROCEDURE result*(): PType
    END;
    PDefinedProcedure* = POINTER TO DefinedProcedure;

    BasicType* = RECORD(NamedType)
        PROCEDURE BasicType*(name: STRING; initializer: STRING);

        mInitializer: STRING
    END;

    PBasicType* = POINTER TO BasicType;

    Nil = RECORD(Type)
    END;

    Module* = RECORD(Id)
        PROCEDURE Module*(name: STRING);

        name-: STRING
    END;

    PModule* = POINTER TO Module;

    ArrayDimensionDescriptionCallback = PROCEDURE(VAR a: Array): STRING;

VAR
    basic*: RECORD
        bool*, ch*, integer*, uint8*, real*, set*: PBasicType
    END;

    numeric*: ARRAY * OF PType;
    nil*: POINTER TO Nil;

PROCEDURE typeName*(type: NamedType): STRING;
    RETURN type.name
END typeName;

PROCEDURE ProcedureId.idType(): STRING;
    RETURN "procedure"
END ProcedureId.idType;

PROCEDURE String.description(): STRING;
VAR
    prefix: STRING;
BEGIN
    IF LEN(SELF.s) = 1 THEN
        prefix := "single-";
    ELSE
        prefix := "multi-";
    END;
    RETURN prefix + "character string"
END String.description;

PROCEDURE stringValue*(s: String): STRING;
    RETURN s.s
END stringValue;

PROCEDURE stringLen*(s: String): INTEGER;
    RETURN LEN(s.s)
END stringLen;

PROCEDURE stringAsChar*(s: String; VAR c: CHAR): BOOLEAN;
VAR
    result: BOOLEAN;
BEGIN
    result := stringLen(s) = 1;
    IF result THEN
        c := s.s[0];
    END;
    RETURN result
END stringAsChar;

PROCEDURE Const.idType(): STRING;
    RETURN "constant"
END Const.idType;

PROCEDURE constType*(c: Const): PType;
    RETURN c.type
END constType;

PROCEDURE Variable.idType(): STRING;
    RETURN "variable"
END Variable.idType;

PROCEDURE procedureType*(p: ProcedureId): PType;
    RETURN p.type
END procedureType;

PROCEDURE BasicType.description(): STRING;
    RETURN SELF.name
END BasicType.description;

PROCEDURE BasicType.initializer(cx: Context.Type): STRING;
    RETURN SELF.mInitializer
END BasicType.initializer;

PROCEDURE BasicType.isScalar(): BOOLEAN;
    RETURN TRUE;
END;

PROCEDURE Nil.description(): STRING;
    RETURN "NIL"
END Nil.description;

PROCEDURE isInt*(t: PType): BOOLEAN;
    RETURN (t = basic.integer) OR (t = basic.uint8)
END isInt;

PROCEDURE intsDescription*(): STRING;
    RETURN "'INTEGER' or 'BYTE'"
END intsDescription;

PROCEDURE isString*(t: PType): BOOLEAN;
    RETURN ((t IS PArray) & (t.elementsType = basic.ch))
           OR (t^ IS String)
END isString;

PROCEDURE moduleName*(m: Module): STRING;
    RETURN m.name
END moduleName;

PROCEDURE BasicType.BasicType(name: STRING; initializer: STRING)
    | SUPER(name),
      mInitializer(initializer);
END;

PROCEDURE foldArrayDimensions(VAR a: Array; dimToStr: ArrayDimensionDescriptionCallback; VAR sizes, of: STRING);
BEGIN  
    elementsType <- a.elementsType;
    IF ~(a IS OpenArray) & (elementsType IS PArray) THEN
        foldArrayDimensions(elementsType^, dimToStr, sizes, of);
        sizes := dimToStr(a) + ", " + sizes;
    ELSE
        sizes := dimToStr(a);
        of := a.elementsType.description();
    END
END foldArrayDimensions;

PROCEDURE arrayDimensionDescription*(VAR a: Array): STRING;
VAR
    result: STRING;
BEGIN
    IF a IS StaticArray THEN
        result := Str.fromInt(a.length());
    END;
    RETURN result
END arrayDimensionDescription;

PROCEDURE arrayDescription*(VAR a: Array; dimToStr: ArrayDimensionDescriptionCallback): STRING;
VAR
    result: STRING;
    sizes, of: STRING;
BEGIN
    IF a.elementsType = NIL THEN (* special arrays, see procedure "LEN" *)
        result := a.name;
    ELSE
        foldArrayDimensions(a, dimToStr, sizes, of);
        IF LEN(sizes) # 0 THEN
            sizes := " " + sizes;
        END;
        result := "ARRAY" + sizes + " OF " + of;
    END;
    RETURN result
END arrayDescription;

PROCEDURE Array.description(): STRING;
    RETURN arrayDescription(SELF, arrayDimensionDescription)
END;

PROCEDURE Array.isScalar(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE StorageType.denote(id: STRING; isReadObly: BOOLEAN): PField;
BEGIN
    Errors.raise("selector '." + id + "' cannot be applied to '" 
               + SELF.description() + "'");
    RETURN NIL
END;

PROCEDURE OpenArray.initializer(cx: Context.Type): STRING;
    RETURN ""
END OpenArray.initializer;

PROCEDURE StaticArray.initializer(cx: Context.Type): STRING;
    RETURN SELF.mInitializer
END StaticArray.initializer;

PROCEDURE arrayElementsType*(a: Array): PStorageType;
    RETURN a.elementsType
END arrayElementsType;

PROCEDURE StaticArray.length(): INTEGER;
    RETURN SELF.len
END StaticArray.length;

PROCEDURE Procedure.initializer(cx: Context.Type): STRING;
    RETURN "null"
END Procedure.initializer;

PROCEDURE Procedure.description(): STRING;
    RETURN SELF.name
END Procedure.description;

PROCEDURE Procedure.isScalar(): BOOLEAN;
    RETURN TRUE;
END;

PROCEDURE DefinedProcedure.designatorCode(id: STRING): STRING;
    RETURN id
END DefinedProcedure.designatorCode;

PROCEDURE ProcedureArgument.description(): STRING;
VAR
    result: STRING;
BEGIN
    IF SELF.isVar THEN
        result := "VAR ";
    END;
    RETURN result + SELF.type.description()
END ProcedureArgument.description;

PROCEDURE ProcedureArgument.ProcedureArgument(type: PType; isVar: BOOLEAN)
    | type(type),
      isVar(isVar);
END;

PROCEDURE Module.idType(): STRING;
    RETURN "MODULE"
END Module.idType;

PROCEDURE String.String(s: STRING)
    | s(s);
END;

PROCEDURE NamedType.NamedType(name: STRING)
    | name(name);
END;

PROCEDURE Array.Array(elementsType: PStorageType)
    | SUPER(""),
      elementsType(elementsType);
BEGIN
END;

PROCEDURE StaticArray.StaticArray(
    initializer: STRING;
    elementsType: PStorageType;
    len: INTEGER ) | 
    SUPER(elementsType),
    mInitializer(initializer),
    len(len);
END;

PROCEDURE Const.Const(type: PType; value: ConstValue.PType)
    | type(type),
      value(value);
END;

PROCEDURE ProcedureId.ProcedureId(type: PType)
    | type(type);
END;

PROCEDURE Module.Module(name: STRING)
    | name(name);
END;

PROCEDURE FieldCode.FieldCode(code, derefCode, propCode: STRING)
    | code(code), derefCode(derefCode), propCode(propCode);
END;

BEGIN
    basic.bool := NEW BasicType("BOOLEAN", "false");
    basic.ch := NEW BasicType("CHAR", "0");
    basic.integer := NEW BasicType("INTEGER", "0");
    basic.uint8 := NEW BasicType("BYTE", "0");
    basic.real := NEW BasicType("REAL", "0");
    basic.set := NEW BasicType("SET", "0");

    numeric.add(basic.integer);
    numeric.add(basic.uint8);
    numeric.add(basic.real);

    NEW(nil);
END Types.

MODULE ContextProcedure;
IMPORT
    Cast, Chars, CodeGenerator, Context, ContextExpression, 
    ContextHierarchy, ContextType, 
    Errors, Expression, LanguageContext,
    Object, Procedure, Scope, Symbols, Types, Variable;
TYPE
    Declaration* = RECORD(ContextType.DeclarationAndIdentHandle)
        PROCEDURE Declaration(parent: ContextHierarchy.PNode);

        PROCEDURE doProlog(): STRING;
        PROCEDURE doEpilog(): STRING;
        PROCEDURE doBeginBody();
        PROCEDURE doMakeArgumentVariable(arg: Types.ProcedureArgument; name: STRING): Types.PVariable;

        PROCEDURE handleReturn(e: Expression.PType);

        outerScope: Scope.PType;
        id: Context.PIdentdefInfo;
        type: Types.PDefinedProcedure;
        multipleArguments: BOOLEAN;
        returnParsed: BOOLEAN;
    END;
    PDeclaration = POINTER TO Declaration;

    FormalParameters* = RECORD(ContextHierarchy.Node)
        PROCEDURE FormalParameters(parent: ContextType.PDeclarationAndIdentHandle);

        PROCEDURE handleQIdent(q: ContextHierarchy.QIdent);
        PROCEDURE doCheckResultType(type: Types.PStorageType);

        arguments: ARRAY * OF Types.PProcedureArgument;
        type: Procedure.PType;
        result: Types.PStorageType;
    END;

    FormalParametersProcDecl* = RECORD(FormalParameters)
    END;

    DefinedParameters* = RECORD(ContextType.HandleSymbolAsType)
        isVar: BOOLEAN;
        argNamesForType: ARRAY * OF STRING;
    END;

    Return* = RECORD(ContextExpression.ExpressionHandler)
    END;

    AddArgumentMsg* = RECORD(ContextHierarchy.Message)
        PROCEDURE AddArgumentMsg(name: STRING; arg: Types.PProcedureArgument);

        name: STRING;
        arg: Types.PProcedureArgument;
    END;

    EndParametersMsg* = RECORD(ContextHierarchy.Message)
    END;

PROCEDURE Declaration.Declaration(parent: ContextHierarchy.PNode)
    | SUPER(parent),
      outerScope(SELF.root().currentScope());
END;

PROCEDURE Declaration.handleIdentdef(id: Context.PIdentdefInfo);
BEGIN
    SELF.id := id;
    SELF.codeGenerator().write(SELF.doProlog());
    root <- SELF.root();
    root.pushScope(Scope.makeProcedure(root.language().stdSymbols));
END;

PROCEDURE Declaration.handleIdent(id: STRING);
BEGIN
    expectId <- SELF.id.id();
    IF expectId # id THEN
        Errors.raise("mismatched procedure names: '" + expectId
                     + "' at the begining and '" + id + "' at the end");
    END;
END;

PROCEDURE Declaration.doProlog(): STRING;
    RETURN Chars.ln + "function " + SELF.id.id() + "(";
END;

PROCEDURE Declaration.doEpilog(): STRING;
    RETURN "";
END;

PROCEDURE Declaration.doBeginBody();
BEGIN
    SELF.codeGenerator().openScope();
END;

PROCEDURE Declaration.typeName(): STRING;
    RETURN "";
END;

PROCEDURE Declaration.setType(type: Types.PStorageType);
BEGIN
    t <- type(Types.PDefinedProcedure);
    procSymbol <- NEW Symbols.Symbol(
        SELF.id.id(), NEW Types.ProcedureId(t));
    SELF.outerScope.addSymbol(procSymbol, SELF.id.exported());
    SELF.type := t;
END;

PROCEDURE addArgument(VAR declaration: Declaration; name: STRING; arg: Types.ProcedureArgument);
BEGIN
    IF name = declaration.id.id() THEN
        Errors.raise("argument '" + name + "' has the same name as procedure");
    END;
    v <- declaration.doMakeArgumentVariable(arg, name);
    s <- NEW Symbols.Symbol(name, v);
    declaration.root().currentScope().addSymbol(s, FALSE);

    code <- declaration.codeGenerator();
    IF declaration.multipleArguments THEN
        code.write(", ");
    ELSE
        declaration.multipleArguments := TRUE;
    END;
    code.write(name + "/*" + arg.description() + "*/");
END;

PROCEDURE Declaration.doMakeArgumentVariable(arg: Types.ProcedureArgument; name: STRING): Types.PVariable;
    RETURN NEW Variable.ArgumentVariable(name, arg.type, arg.isVar);
END;

PROCEDURE Declaration.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
VAR
    result: Object.PType;
BEGIN
    IF msg IS EndParametersMsg THEN
        SELF.codeGenerator().write(")");
        SELF.doBeginBody();
    ELSIF msg IS AddArgumentMsg THEN
        ASSERT(msg.arg # NIL);
        addArgument(SELF, msg.name, msg.arg^);
    ELSE
        result := SUPER(msg);
    END;
    RETURN result;
END;

PROCEDURE Declaration.handleReturn(e: Expression.PType);
VAR
    op: LanguageContext.PCastOp;
BEGIN
    type <- e.type();
    result <- SELF.type.result();
    IF result = NIL THEN
        Errors.raise("unexpected RETURN in PROCEDURE declared with no result type");
    END;
    
    language <- SELF.root().language();
    IF language.types.implicitCast(type, result, FALSE, op) # Cast.errNo THEN
        Errors.raise(
            "RETURN '" + result.description() + "' expected, got '"
            + type.description() + "'");
    END;

    SELF.codeGenerator().write("return " + op.clone(language, e) + ";" + Chars.ln);

    SELF.returnParsed := TRUE;
END;

PROCEDURE Declaration.endParse(): BOOLEAN;
BEGIN
    SELF.codeGenerator().closeScope(SELF.doEpilog());
    SELF.root().popScope();

    result <- SELF.type.result();
    IF (result # NIL) & ~SELF.returnParsed THEN
        Errors.raise("RETURN expected at the end of PROCEDURE declared with '"
                     + result.description() + "' result type");
    END;
    RETURN TRUE;
END;

PROCEDURE FormalParameters.FormalParameters(parent: ContextType.PDeclarationAndIdentHandle)
    | SUPER(parent),
      type(NEW Procedure.Type(parent.typeName()));
BEGIN
    parent.setType(SELF.type);
END;

PROCEDURE FormalParameters.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
VAR
    result: Object.PType;
BEGIN
    IF msg IS AddArgumentMsg THEN
        SELF.arguments.add(msg.arg);
    ELSE
        result := SUPER(msg);
    END;
    RETURN result;
END;

PROCEDURE FormalParameters.handleQIdent(q: ContextHierarchy.QIdent);
BEGIN
    s <- ContextHierarchy.getQIdSymbolAndScope(SELF.root()^, q);
    resultType <- ContextExpression.unwrapType(s.symbol().info());
    SELF.doCheckResultType(resultType);
    SELF.result := resultType;
END;

PROCEDURE FormalParameters.doCheckResultType(type: Types.PStorageType);
BEGIN
    IF type IS Types.PArray THEN
        Errors.raise("the result type of a procedure cannot be an ARRAY");
    ELSIF type IS Types.PRecord THEN
        Errors.raise("the result type of a procedure cannot be a RECORD");
    END;
END;

PROCEDURE FormalParameters.endParse(): BOOLEAN;
BEGIN
    SELF.type.define(SELF.arguments, SELF.result);
    RETURN TRUE;
END;

PROCEDURE FormalParametersProcDecl.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
BEGIN
    result <- SUPER(msg);
    IF msg IS AddArgumentMsg THEN
        result := SELF.parent().handleMessage(msg);
    END;
    RETURN result;
END;

PROCEDURE FormalParametersProcDecl.endParse(): BOOLEAN;
BEGIN
    result <- SUPER();
    IF result THEN
        void <- SELF.handleMessage(NEW EndParametersMsg()^);
    END;
    RETURN result;
END;

PROCEDURE DefinedParameters.handleLiteral(s: STRING);
BEGIN
    IF s = "VAR" THEN
        SELF.isVar := TRUE;
    END;
END;

PROCEDURE DefinedParameters.handleIdent(id: STRING);
BEGIN
    SELF.argNamesForType.add(id);
END;

PROCEDURE DefinedParameters.setType(type: Types.PStorageType);
BEGIN
    FOR i <- 0 TO LEN(SELF.argNamesForType) - 1 DO
        name <- SELF.argNamesForType[i];
        void <- SELF.handleMessage(
            NEW AddArgumentMsg(name, NEW Types.ProcedureArgument(type, SELF.isVar))^);
    END;
    SELF.isVar := FALSE;
    SELF.argNamesForType.clear();
END;

PROCEDURE Return.handleExpression(e: Expression.PType);
BEGIN
    SELF.parent()^(Declaration).handleReturn(e);
END;

PROCEDURE Return.codeGenerator(): CodeGenerator.PIGenerator;
    RETURN CodeGenerator.nullGenerator;
END;

PROCEDURE AddArgumentMsg.AddArgumentMsg(name: STRING; arg: Types.PProcedureArgument)
    | name(name),
      arg(arg);
END;

END ContextProcedure.
MODULE String;
IMPORT JS;

PROCEDURE fromChar*(c: CHAR): STRING;
VAR
    result: STRING;
BEGIN
    JS.do("result = JS.String.fromCharCode(c)")
    RETURN result
END fromChar;

PROCEDURE fromInt*(i: INTEGER): STRING;
VAR 
    result: STRING;
BEGIN
    JS.do("result = '' + i");
    RETURN result
END fromInt;

PROCEDURE parseReal*(s: STRING): REAL;
VAR 
    result: REAL;
BEGIN
    JS.do("result = JS.Number(s)");
    RETURN result;
END;

PROCEDURE parseHex*(s: STRING): INTEGER;
VAR 
    result: INTEGER;
BEGIN
    JS.do("result = JS.parseInt(s, 16)");
    RETURN result;
END;

PROCEDURE indexOf*(self: STRING; c: CHAR): INTEGER;
VAR 
    result: INTEGER;
BEGIN
    JS.do("result = self.indexOf(JS.String.fromCharCode(c))")
    RETURN result
END indexOf;

PROCEDURE indexOfFrom*(self: STRING; c: CHAR; pos: INTEGER): INTEGER;
VAR 
    result: INTEGER;
BEGIN
    JS.do("result = self.indexOf(JS.String.fromCharCode(c), pos)")
    RETURN result
END indexOfFrom;

PROCEDURE lastIndexOfFrom*(self: STRING; c: CHAR; pos: INTEGER): INTEGER;
VAR 
    result: INTEGER;
BEGIN
    JS.do("result = self.lastIndexOf(JS.String.fromCharCode(c), pos)")
    RETURN result
END;

PROCEDURE substr*(self: STRING; pos: INTEGER; len: INTEGER): STRING;
VAR 
    result: STRING;
BEGIN
    JS.do("result = self.substr(pos, len)")
    RETURN result
END substr;

PROCEDURE join*(a: ARRAY OF STRING; separator: STRING): STRING;
VAR 
    result: STRING;
BEGIN
    JS.do("result = a.join(separator)")
    RETURN result
END;

END String.
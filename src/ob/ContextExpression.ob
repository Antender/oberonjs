MODULE ContextExpression;
IMPORT 
    Chars, Code, ConstValue, ContextHierarchy, Operator, String, Types;
TYPE
    ExpressionHandler = RECORD(ContextHierarchy.Node)
        PROCEDURE handleExpression(e: Code.PExpression);
        PROCEDURE endParse();

        expression: Code.PExpression;
    END;

    SimpleExpression = RECORD(ContextHierarchy.Node)
        PROCEDURE handleTerm(e: Code.PExpression);
    END;
    PSimpleExpression = POINTER TO SimpleExpression;

    PFactor = POINTER TO Factor;

    Factor* = RECORD(ExpressionHandler)
        PROCEDURE Factor(parent: PFactor);

        PROCEDURE handleConst(type: Types.PType; value: ConstValue.PType; code: STRING);
        PROCEDURE handleLiteral(s: STRING);
        PROCEDURE handleLogicalNot();

        factorParent: PFactor;
        logicalNot: BOOLEAN;
    END;

    BinaryOperator = PROCEDURE(l, r: Code.PExpression): Code.PExpression;

    Term* = RECORD(ExpressionHandler)
        PROCEDURE Term(parent: PSimpleExpression);

        PROCEDURE type(): Types.PType;
        PROCEDURE handleOperator(op: BinaryOperator);

        simpleExpression: PSimpleExpression;
        operator: BinaryOperator;
    END;

    Const = RECORD(ContextHierarchy.Node)
        PROCEDURE Const(factor: PFactor);

        factor: PFactor;
    END;

    Integer* = RECORD(Const)
        PROCEDURE handleInt*(n: INTEGER);
    END;

    Real* = RECORD(Const)
        PROCEDURE handleReal*(r: REAL);
    END;

    Str* = RECORD(Const)
        PROCEDURE handleStr*(s: STRING);
    END;

PROCEDURE Factor.Factor(parent: PFactor)
    | SUPER(parent),
      factorParent(parent);
END;

PROCEDURE Factor.handleConst(type: Types.PType; value: ConstValue.PType; code: STRING);
BEGIN
    SELF.expression := Code.makeExpression(code, type, NIL, value);
END;

PROCEDURE Factor.handleLiteral(s: STRING);
BEGIN
    IF s = "NIL" THEN
        SELF.handleConst(Types.nil, NIL, "null");
    ELSIF s = "TRUE" THEN
        SELF.handleConst(Types.basic.bool, NEW ConstValue.Int(1), "true");
    ELSIF s = "FALSE" THEN
        SELF.handleConst(Types.basic.bool, NEW ConstValue.Int(0), "false");
    ELSIF s = "~" THEN
        SELF.handleLogicalNot();
    END;
END;

PROCEDURE Factor.handleLogicalNot();
BEGIN
    SELF.logicalNot := TRUE;
END;

PROCEDURE Factor.handleExpression(e: Code.PExpression);
BEGIN
    SELF.expression := e;
END;

PROCEDURE Factor.endParse();
BEGIN
    IF SELF.logicalNot THEN
        ContextHierarchy.checkTypeMatch(SELF.expression.type(), Types.basic.bool);
        SELF.expression := Operator.not(SELF.expression);
    END;
    SELF.factorParent.handleExpression(SELF.expression);
END;

PROCEDURE Term.Term(parent: PSimpleExpression)
    | SUPER(parent),
      simpleExpression(parent);
END;


PROCEDURE Term.type(): Types.PType;
VAR
    result: Types.PType;
BEGIN
    IF SELF.expression # NIL THEN
        result := SELF.expression.type();
    ELSE
        result := SELF.attributes.designator.type();
    END;
    RETURN result;
END;

PROCEDURE Term.handleOperator(op: BinaryOperator);
BEGIN
    SELF.operator := op;
END;

PROCEDURE Term.handleExpression(e: Code.PExpression);
BEGIN
    ContextHierarchy.promoteExpressionType(SELF.root()^, SELF.expression, e);
    IF SELF.operator = NIL THEN
        SELF.expression := e;
    ELSIF SELF.expression # NIL THEN
        SELF.expression := SELF.operator(SELF.expression, e);
    ELSE
        SELF.expression := SELF.operator(e, NIL);
    END;
END;

PROCEDURE Term.endParse();
VAR
    const: ConstValue.PType;
BEGIN
    e <- SELF.expression;
    IF e = NIL THEN
        d <- SELF.attributes.designator;
        info <- d.info();
        IF info IS Types.PConst THEN
            const := info.value;
        END;
        e := Code.makeExpression(d.code(), d.type(), d, const);
    END;
    SELF.simpleExpression.handleTerm(e);
END;

PROCEDURE Const.Const(factor: PFactor)
    | SUPER(factor),
      factor(factor);
END;

PROCEDURE Integer.handleInt(n: INTEGER);
BEGIN
    SELF.factor.handleConst(
        Types.basic.integer, 
        NEW ConstValue.Int(n), 
        String.fromInt(n));
END;

PROCEDURE Real.handleReal(r: REAL);
BEGIN
    SELF.factor.handleConst(
        Types.basic.real, 
        NEW ConstValue.Real(r), 
        String.fromReal(r));
END;

PROCEDURE escapeString(s: STRING): STRING;
CONST
    doubleQuote = Chars.doubleQuote;
    ln          = Chars.ln;
    cr          = Chars.cr;
    tab         = Chars.tab;
    backspace   = Chars.backspace;
    feed        = Chars.feed;
    backslash   = Chars.backslash;
VAR
    result: STRING;
BEGIN
    result := doubleQuote;
    from <- 0;
    FOR i <- 0 TO LEN(s) - 1 DO
        escape <- CHR(0);
        CASE s[i] OF
              backslash:    escape := backslash;
            | doubleQuote:  escape := doubleQuote;
            | ln:           escape := "n";
            | cr:           escape := "r";
            | tab:          escape := "t";
            | backspace:    escape := "b";
            | feed:         escape := "f";
        END;

        IF ORD(escape) # 0 THEN
            result := result + String.substr(s, from, i - from) + backslash + String.fromChar(escape);
            from := i + 1; 
        END;
    END;
    RETURN result + String.substr(s, from, LEN(s) - from) + doubleQuote;
END;

PROCEDURE Str.handleStr(s: STRING);
BEGIN
    SELF.factor.handleConst(
        NEW Types.String(s), 
        NEW ConstValue.String(s), 
        escapeString(s));
END;

END ContextExpression.
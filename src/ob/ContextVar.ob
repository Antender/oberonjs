MODULE ContextVar;
IMPORT
    Chars, Context, ContextHierarchy, ContextType, Errors, 
    Object, Symbols, Types, Variable;
TYPE
    Declaration* = RECORD(ContextType.DeclarationAndIdentHandle)
        PROCEDURE doInitCode(): STRING;
        PROCEDURE doCheckExport(name: STRING);

        idents: ARRAY * OF Context.PIdentdefInfo;
        type: Types.PStorageType;
    END;

PROCEDURE Declaration.handleIdentdef(id: Context.PIdentdefInfo);
BEGIN
    SELF.idents.add(id);
END;

PROCEDURE Declaration.typeName(): STRING;
    RETURN "";
END;

PROCEDURE Declaration.setType(type: Types.PStorageType);
BEGIN
    SELF.type := type;
END;

PROCEDURE Declaration.exportField(name: STRING);
BEGIN
    ContextType.checkIfFieldCanBeExported(name, SELF.idents, "variable");
END;

PROCEDURE Declaration.isAnonymousDeclaration(): BOOLEAN;
    RETURN TRUE;
END;
(*
PROCEDURE Declaration.typeName(): STRING;
    RETURN "";
END;
*)
PROCEDURE Declaration.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
BEGIN
    IF msg IS ContextType.ForwardTypeMsg THEN
        Errors.raise("type '" + msg.id + "' was not declared");
    END;
    RETURN SUPER(msg);
END;

PROCEDURE Declaration.doInitCode(): STRING;
    RETURN SELF.type.initializer(SELF);
END;

PROCEDURE Declaration.doCheckExport(name: STRING);
END;

PROCEDURE Declaration.endParse(): BOOLEAN;
BEGIN
    gen <- SELF.codeGenerator();
    FOR i <- 0 TO LEN(SELF.idents) - 1 DO
        id <-SELF.idents[i];
        varName <- id.id();
        IF id.exported() THEN
            SELF.doCheckExport(varName);
        END;

        v <- NEW Variable.DeclaredVariable(varName, SELF.type);
        SELF.root().currentScope().addSymbol(NEW Symbols.Symbol(varName, v), id.exported());
        gen.write("var " + varName + " = " + SELF.doInitCode() + ";");
    END;

    gen.write(Chars.ln);
    RETURN TRUE;
END;

END ContextVar.
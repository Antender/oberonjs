MODULE Symbols;
IMPORT Object, ScopeBase, Types, TypeId;
TYPE
    Symbol* = RECORD(Object.Type)
        PROCEDURE Symbol*(id: STRING; info: Types.PId);

        PROCEDURE id*(): STRING;
        PROCEDURE info*(): Types.PId;
        PROCEDURE isModule*(): BOOLEAN;
        PROCEDURE isVariable*(): BOOLEAN;
        PROCEDURE isConst*(): BOOLEAN;
        PROCEDURE isType*(): BOOLEAN;
        PROCEDURE isProcedure*(): BOOLEAN;

        mId: STRING;
        mInfo: Types.PId
    END;

    PSymbol* = POINTER TO Symbol;
    Map* = MAP OF PSymbol;

    FoundSymbol* = RECORD
        PROCEDURE FoundSymbol*(s: PSymbol; scope: ScopeBase.PType);

        PROCEDURE symbol*(): PSymbol;
        PROCEDURE scope*(): ScopeBase.PType;

        mSymbol: PSymbol;
        mScope: ScopeBase.PType
    END;

    PFoundSymbol* = POINTER TO FoundSymbol;

PROCEDURE Symbol.id(): STRING;
    RETURN SELF.mId
END Symbol.id;

PROCEDURE Symbol.info(): Types.PId;
    RETURN SELF.mInfo
END Symbol.info;

PROCEDURE Symbol.isModule(): BOOLEAN;
    RETURN SELF.mInfo IS Types.PModule
END Symbol.isModule;

PROCEDURE Symbol.isVariable(): BOOLEAN;
    RETURN SELF.mInfo IS Types.PVariable
END Symbol.isVariable;

PROCEDURE Symbol.isConst(): BOOLEAN;
    RETURN SELF.mInfo IS Types.PConst
END Symbol.isConst;

PROCEDURE Symbol.isType(): BOOLEAN;
    RETURN SELF.mInfo IS TypeId.PType;
END;

PROCEDURE Symbol.isProcedure(): BOOLEAN;
    RETURN SELF.mInfo IS Types.PProcedureId
END Symbol.isProcedure;

PROCEDURE FoundSymbol.scope(): ScopeBase.PType;
    RETURN SELF.mScope
END FoundSymbol.scope;

PROCEDURE FoundSymbol.symbol(): PSymbol;
    RETURN SELF.mSymbol
END FoundSymbol.symbol;

PROCEDURE Symbol.Symbol(id: STRING; info: Types.PId)
    | mId(id),
      mInfo(info);
END;

PROCEDURE FoundSymbol.FoundSymbol(s: PSymbol; scope: ScopeBase.PType)
    | mSymbol(s),
      mScope(scope);
END;

END Symbols.
MODULE Stream;
IMPORT JsString;

TYPE
    Type* = POINTER TO RECORD
        s: JsString.Type;
        pos: INTEGER
    END;

    ReaderProc = PROCEDURE(c: CHAR): BOOLEAN;

PROCEDURE make*(text: JsString.Type): Type;
VAR result: Type;
BEGIN
    NEW(result);
    result.s := text;
    RETURN result
END make;

PROCEDURE eof*(self: Type): BOOLEAN;
    RETURN self.pos = JsString.len(self.s)
END eof;

PROCEDURE pos*(self: Type): INTEGER;
    RETURN self.pos
END pos;

PROCEDURE setPos*(self: Type; pos: INTEGER);
BEGIN
    ASSERT(pos <= JsString.len(self.s));
    self.pos := pos
END setPos;

PROCEDURE next*(self: Type; n: INTEGER);
BEGIN
    ASSERT(self.pos + n <= JsString.len(self.s));
    self.pos := self.pos + n;
END next;

PROCEDURE peekChar*(self: Type): CHAR;
BEGIN
    ASSERT(~eof(self));
    RETURN JsString.at(self.s, self.pos)
END peekChar;

PROCEDURE getChar*(self: Type): CHAR;
VAR result: CHAR;
BEGIN
    ASSERT(~eof(self));
    result := JsString.at(self.s, self.pos);
    INC(self.pos);
    RETURN result
END getChar;

PROCEDURE peekStr*(self: Type; s: ARRAY OF CHAR): BOOLEAN;
VAR
    result: BOOLEAN;
    i: INTEGER;
BEGIN
    IF LEN(s) <= JsString.len(self.s) - self.pos THEN
        WHILE (i < LEN(s)) & (s[i] = JsString.at(self.s, self.pos + i)) DO
            INC(i)
        END;
        result := i = LEN(s);
    END
    RETURN result
END peekStr;

PROCEDURE read*(self: Type; f: ReaderProc): BOOLEAN;
BEGIN
    WHILE ~eof(self) & f(peekChar(self)) DO
        next(self, 1);
    END
    RETURN ~eof(self)
END read;

PROCEDURE lineNumber*(self: Type): INTEGER;
VAR 
    line: INTEGER;
    lastPos: INTEGER;
BEGIN
    lastPos := JsString.indexOf(self.s, 0DX);
    WHILE (lastPos # -1) & (lastPos < self.pos) DO
        INC(line);
        lastPos := JsString.indexOfFrom(self.s, 0DX, lastPos + 1);
    END;
    RETURN line + 1
END lineNumber;

END Stream.
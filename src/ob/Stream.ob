MODULE Stream;
IMPORT
    String;
CONST
    kCR* = 0AX;

TYPE
    Type* = RECORD
        PROCEDURE Type*(text: STRING);

        s: STRING;
        pos: INTEGER
    END;

    ReaderProc = PROCEDURE(c: CHAR): BOOLEAN;

PROCEDURE Type.Type(text: STRING)
    | s(text);
END;

PROCEDURE eof*(self: Type): BOOLEAN;
    RETURN self.pos = LEN(self.s)
END eof;

PROCEDURE pos*(self: Type): INTEGER;
    RETURN self.pos
END pos;

PROCEDURE setPos*(VAR self: Type; pos: INTEGER);
BEGIN
    ASSERT(pos <= LEN(self.s));
    self.pos := pos
END setPos;

PROCEDURE next*(VAR self: Type; n: INTEGER);
BEGIN
    ASSERT(self.pos + n <= LEN(self.s));
    self.pos := self.pos + n;
END next;

PROCEDURE peekChar*(self: Type): CHAR;
BEGIN
    ASSERT(~eof(self));
    RETURN self.s[self.pos]
END peekChar;

PROCEDURE getChar*(VAR self: Type): CHAR;
VAR result: CHAR;
BEGIN
    ASSERT(~eof(self));
    result := self.s[self.pos];
    INC(self.pos);
    RETURN result
END getChar;

PROCEDURE peekStr*(self: Type; s: STRING): BOOLEAN;
VAR
    result: BOOLEAN;
    i: INTEGER;
BEGIN
    IF LEN(s) <= LEN(self.s) - self.pos THEN
        WHILE (i < LEN(s)) & (s[i] = self.s[self.pos + i]) DO
            INC(i)
        END;
        result := i = LEN(s);
    END
    RETURN result
END peekStr;

PROCEDURE read*(VAR self: Type; f: ReaderProc): BOOLEAN;
BEGIN
    WHILE ~eof(self) & f(peekChar(self)) DO
        next(self, 1);
    END
    RETURN ~eof(self)
END read;

PROCEDURE lineNumber*(self: Type): INTEGER;
VAR 
    line: INTEGER;
    lastPos: INTEGER;
BEGIN
    lastPos := String.indexOf(self.s, kCR);
    WHILE (lastPos # -1) & (lastPos < self.pos) DO
        INC(line);
        lastPos := String.indexOfFrom(self.s, kCR, lastPos + 1);
    END;
    RETURN line + 1
END lineNumber;

PROCEDURE currentLine*(self: Type): STRING;
BEGIN
    from <- String.lastIndexOfFrom(self.s, kCR, self.pos);
    IF from = -1 THEN
        from := 0
    ELSE
        from := from + 1;
    END;
    to <- String.indexOfFrom(self.s, kCR, self.pos);
    IF to = -1 THEN
        to := LEN(self.s);
    END;
    RETURN String.substr(self.s, from, to - from);
END;

END Stream.
MODULE LanguageContext;
IMPORT Context, CodeGenerator, Expression, T := Types;

TYPE
    PType* = POINTER TO Type;

    CastOp* = RECORD
        PROCEDURE make*(cx: PType; e: Expression.PType): Expression.PType;
        PROCEDURE assign*(cx: PType; left, right: Expression.PType): STRING;
        PROCEDURE clone*(cx: PType; e: Expression.PType): STRING;
    END;

    PCastOp* = POINTER TO CastOp;

    Types* = RECORD         
        PROCEDURE implicitCast*(from, to: T.PType; toVar: BOOLEAN; VAR op: PCastOp): INTEGER;
        PROCEDURE typeInfo*(type: T.PType): STRING;
        PROCEDURE makeOpenArray*(type: T.PType): T.PStorageType;
        PROCEDURE makeStaticArray*(type: T.PType; init: STRING; length: INTEGER): T.PStorageType;
    END;
    PTypes* = POINTER TO Types;

    Type* = RECORD(Context.Type)
        moduleResolver*: PROCEDURE(name: STRING): T.PModule;
        codeGenerator*: CodeGenerator.PIGenerator;
        types*: PTypes;
    END;

END LanguageContext.
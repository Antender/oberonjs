MODULE LanguageContext;
IMPORT CodeGenerator, Context, Expression, OberonRtl, Symbols, T := Types;

TYPE
    PType* = POINTER TO Type;

    CastOp* = RECORD
        PROCEDURE make*(cx: PType; e: Expression.PType): Expression.PType;
        PROCEDURE assign*(cx: PType; left, right: Expression.PType): STRING;
        PROCEDURE clone*(cx: PType; e: Expression.PType): STRING;
    END;

    PCastOp* = POINTER TO CastOp;

    Types* = RECORD         
        PROCEDURE implicitCast*(from, to: T.PType; toVar: BOOLEAN; VAR op: PCastOp): INTEGER;
        PROCEDURE typeInfo*(type: T.PType): STRING;
        PROCEDURE makeOpenArray*(type: T.PType): T.PStorageType;
        PROCEDURE makeStaticArray*(type: T.PType; init: STRING; length: INTEGER): T.PStorageType;
    END;
    PTypes* = POINTER TO Types;

    Language* = RECORD
        moduleResolver-: PROCEDURE(name: STRING): T.PModule;
        rtl-: OberonRtl.PType;
        codeGenerator-: CodeGenerator.PIGenerator;
        types-: PTypes;
        stdSymbols-: Symbols.Map;
    END;
    PLanguage* = POINTER TO Language;

    Type* = RECORD
        PROCEDURE Type*(language: PLanguage; cx: Context.PType);

        language-: PLanguage;
        cx-: Context.PType;
    END;

PROCEDURE Type.Type(language: PLanguage; cx: Context.PType)
    | language(language),
      cx(cx);
END;

END LanguageContext.
MODULE Procedure;
IMPORT
    Cast,
    Code, 
    Context, 
    Errors, 
    JsArray, 
    Language,
    LanguageContext,
    OberonRtl,
    Object, 
    Operator, 
    Precedence := CodePrecedence, 
    String,
    Symbols, 
    Types;
TYPE
    Call* = RECORD
        PROCEDURE make*(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression
    END;
    PCall = POINTER TO Call;

    StdCall* = RECORD(Call)
        args: JsArray.Type
    END;
    PStdCall = POINTER TO StdCall;

    LenArgumentCheck = PROCEDURE(argType: Types.PType): BOOLEAN;
    CallLen* = RECORD(StdCall)
        check: LenArgumentCheck
    END;

    CallGenerator* = RECORD
        PROCEDURE handleArgument*(e: Code.PExpression);
        PROCEDURE end*(): Code.PExpression;

        args: JsArray.Type;
        cx: LanguageContext.PType;
        call: PCall
    END;
    PCallGenerator* = POINTER TO CallGenerator;

    Type* = RECORD(Types.DefinedProcedure)
        PROCEDURE callGenerator(cx: LanguageContext.PType): PCallGenerator;
        PROCEDURE define(args: JsArray.Type; result: Types.PType);

        mArgs: JsArray.Type;
        mResult: Types.PType
    END;
    PType = POINTER TO Type;

    Std* = RECORD(Types.Procedure)
        PROCEDURE callGenerator*(cx: LanguageContext.PType): PCallGenerator;

        call: PCall
    END;

    ArgumentsCode = RECORD
        PROCEDURE write(actual: Code.PExpression; 
                        expected: Types.PProcedureArgument; 
                        cast: Cast.PCastOp
                        );
        PROCEDURE result(): STRING
    END;
    PArgumentsCode = POINTER TO ArgumentsCode;

    GenArgCode = RECORD(ArgumentsCode)
        code: STRING;
        cx: Context.PType
    END;

    BinaryOp = PROCEDURE(left, right: Code.PExpression; rtl: OberonRtl.PType): Code.PExpression;
    BinaryOpStr = PROCEDURE (x, y: STRING): STRING;
VAR
    predefined*: JsArray.Type;

PROCEDURE checkArgument(
    actual: Code.PExpression; 
    expected: Types.PProcedureArgument; 
    pos: INTEGER;
    code: PArgumentsCode;
    types: Language.PTypes
    );
VAR
    actualType, expectType: Types.PType;
    designator: Code.PDesignator;
    info: Types.PId;
    result: Cast.PCastOp;
    castErr: INTEGER;
BEGIN
    expectType := expected.type; (* can be NIL for predefined functions (like NEW), dont check it in this case *)
    IF expectType # NIL THEN
        actualType := actual.type();
        castErr := types.implicitCast(actualType, expectType, expected.isVar, Operator.castOperations, result);
        IF castErr = Cast.errVarParameter THEN
            Errors.raise("type mismatch for argument " + String.fromInt(pos + 1)
                         + ": cannot pass '" + actualType.description()
                         + "' as VAR parameter of type '" + expectType.description() + "'");
        ELSIF castErr # Cast.errNo THEN
            Errors.raise("type mismatch for argument " + String.fromInt(pos + 1)
                         + ": '" + actualType.description() + "' cannot be converted to '"
                         + expectType.description() + "'");
        END;
    END;
    IF expected.isVar THEN
        designator := actual.designator();
        IF designator = NIL THEN
            Errors.raise("expression cannot be used as VAR parameter");
        END;
        info := designator.info();
        IF info IS Types.PConst THEN
            Errors.raise("constant cannot be used as VAR parameter");
        END;
        IF (info IS Types.PVariable) 
         & info(Types.PVariable).isReadOnly() THEN
            Errors.raise(info.idType() + " cannot be used as VAR parameter");
        END;
    END;
    IF code # NIL THEN
        code.write(actual, expected, result);
    END;
END checkArgument;

PROCEDURE checkArgumentsType(
    actual: JsArray.Type; 
    expected: JsArray.Type; 
    code: PArgumentsCode;
    types: Language.PTypes
    );
VAR
    actualLen: INTEGER;
    i: INTEGER;
    actualExp: Object.PType;
    expectedArg: Object.PType;
BEGIN
    actualLen := JsArray.len(actual);
    WHILE i < actualLen DO
        actualExp := JsArray.at(actual, i);
        expectedArg := JsArray.at(expected, i);
        checkArgument(actualExp(Code.PExpression), expectedArg(Types.PProcedureArgument), i, code, types);
        INC(i);
    END;
END checkArgumentsType;

PROCEDURE checkArgumentsCount*(actual, expected: INTEGER);
BEGIN
    IF actual # expected THEN
        Errors.raise(
            String.fromInt(expected) + " argument(s) expected, got " 
            + String.fromInt(actual));
    END;
END checkArgumentsCount;

PROCEDURE processArguments(
    actual: JsArray.Type; 
    expected: JsArray.Type; 
    code: PArgumentsCode;
    types: Language.PTypes
    );
BEGIN
    checkArgumentsCount(JsArray.len(actual), JsArray.len(expected));
    checkArgumentsType(actual, expected, code, types);
END processArguments;

PROCEDURE checkArguments(actual: JsArray.Type; expected: JsArray.Type; types: Language.PTypes);
BEGIN
    processArguments(actual, expected, NIL, types);
END checkArguments;

PROCEDURE initStd*(name: STRING; call: PCall; VAR result: Std);
BEGIN
    Types.initProcedure(result, name);
    result.call := call;
END initStd;

PROCEDURE makeStd*(name: STRING; call: PCall): Types.PProcedure;
VAR
    result: POINTER TO Std;
BEGIN
    NEW(result);
    initStd(name, call, result^);
    RETURN result
END makeStd;

PROCEDURE CallGenerator.handleArgument(e: Code.PExpression);
BEGIN
    JsArray.add(SELF.args, e);
END CallGenerator.handleArgument;

PROCEDURE CallGenerator.end(): Code.PExpression;
    RETURN SELF.call.make(SELF.args, SELF.cx^)
END CallGenerator.end;

PROCEDURE makeCallGenerator*(call: PCall; cx: LanguageContext.PType): PCallGenerator;
VAR
    result: PCallGenerator;
BEGIN
    ASSERT(cx # NIL);
    NEW(result);
    result.args := JsArray.make();
    result.cx := cx;
    result.call := call;
    RETURN result
END makeCallGenerator;

PROCEDURE GenArgCode.write(actual: Code.PExpression; expected: Types.PProcedureArgument; cast: Cast.PCastOp);
VAR
    e: Code.PExpression;
    coercedArg: Code.PExpression;
BEGIN
    IF (expected # NIL) & expected.isVar THEN
        coercedArg := Code.refExpression(actual);
    ELSE
        coercedArg := Code.derefExpression(actual);
    END;
    IF LEN(SELF.code) # 0 THEN
        SELF.code := SELF.code + ", ";
    END;
    IF cast # NIL THEN
        e := cast.make(SELF.cx.rtl, coercedArg);
    ELSE
        e := coercedArg;
    END;
    SELF.code := SELF.code + e.code();
END GenArgCode.write;

PROCEDURE GenArgCode.result(): STRING;
    RETURN SELF.code
END GenArgCode.result;

PROCEDURE makeProcCallGeneratorWithCustomArgs*(
    cx: LanguageContext.PType; 
    type: Types.DefinedProcedure;
    argumentsCode: PArgumentsCode
    ) : PCallGenerator;
TYPE
    CallImpl = RECORD(Call)
        args: JsArray.Type;
        result: Types.PType;
        argumentsCode: PArgumentsCode
    END;
VAR
    call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        expectedArgs: JsArray.Type;
        a: Object.PType;

    BEGIN
        expectedArgs := SELF.args;
        IF expectedArgs # NIL THEN
            processArguments(args, expectedArgs, SELF.argumentsCode, cx.types);
        ELSE
            FOR i <- 0 TO JsArray.len(args) - 1 DO
                a := JsArray.at(args, i);
                SELF.argumentsCode.write(a(Code.PExpression), NIL, NIL);
            END;
        END;
        RETURN Code.makeSimpleExpression(
                "(" + SELF.argumentsCode.result() + ")",
                SELF.result
                )
    END CallImpl.make;
BEGIN
    NEW(call);
    call.args := type.args();
    call.result := type.result();
    call.argumentsCode := argumentsCode;
    RETURN makeCallGenerator(call, cx)
END makeProcCallGeneratorWithCustomArgs;

PROCEDURE makeArgumentsCode*(cx: Context.PType): PArgumentsCode;
VAR
    result: POINTER TO GenArgCode;
BEGIN
    NEW(result);
    result.cx := cx;
    RETURN result
END makeArgumentsCode;

PROCEDURE makeProcCallGenerator*(
    cx: LanguageContext.PType; 
    type: Types.DefinedProcedure
    ) : PCallGenerator;
    RETURN makeProcCallGeneratorWithCustomArgs(cx, type, makeArgumentsCode(cx))
END makeProcCallGenerator;

PROCEDURE Std.description(): STRING;
    RETURN "standard procedure " + SELF.name
END Std.description;

PROCEDURE Std.callGenerator(cx: LanguageContext.PType): PCallGenerator;
    RETURN makeCallGenerator(SELF.call, cx)
END Std.callGenerator;

PROCEDURE Std.designatorCode(id: STRING): STRING;
    RETURN ""
END Std.designatorCode;

PROCEDURE makeSymbol*(p: Types.PProcedure): Symbols.PSymbol;
    RETURN Symbols.makeSymbol(p.name, Types.makeProcedure(p))
END makeSymbol;

PROCEDURE nthArgument(args: JsArray.Type; i: INTEGER): Code.PExpression;
VAR
    arg: Object.PType;
BEGIN
    arg := JsArray.at(args, i);
    RETURN arg(Code.PExpression)
END nthArgument;

PROCEDURE initStdCall*(call: PStdCall);
BEGIN
    call.args := JsArray.make();
END initStdCall;

PROCEDURE hasArgument(call: PStdCall; type: Types.PType);
VAR
    a: Types.PProcedureArgument;
BEGIN
    NEW(a);
    a.type := type;
    JsArray.add(call.args, a);
END hasArgument;

PROCEDURE hasVarArgument(call: PStdCall; type: Types.PType);
VAR
    a: Types.PProcedureArgument;
BEGIN
    NEW(a);
    a.isVar := TRUE;
    a.type := type;
    JsArray.add(call.args, a);
END hasVarArgument;

PROCEDURE hasArgumentWithCustomType*(call: PStdCall);
VAR
    a: Types.PProcedureArgument;
BEGIN
    NEW(a);
    JsArray.add(call.args, a);
END hasArgumentWithCustomType;

PROCEDURE hasVarArgumnetWithCustomType(call: PStdCall);
VAR
    a: Types.PProcedureArgument;
BEGIN
    NEW(a);
    a.isVar := TRUE;
    JsArray.add(call.args, a);
END hasVarArgumnetWithCustomType;

PROCEDURE checkSingleArgument*(actual: JsArray.Type; call: StdCall; types: Language.PTypes): Code.PExpression;
BEGIN
    ASSERT(JsArray.len(call.args) = 1);
    checkArguments(actual, call.args, types);
    ASSERT(JsArray.len(actual) = 1);
    RETURN nthArgument(actual, 0)
END checkSingleArgument;

PROCEDURE makeNew(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        arg: Code.PExpression;
        argType: Types.PType;
        baseType: Types.PRecord;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.types);
        argType := arg.type();
        IF ~(argType IS Types.PPointer) THEN
            Errors.raise("POINTER variable expected, got '" 
                         + argType.description() + "'");
        END;
        baseType := Types.pointerBase(argType(Types.PPointer)^);
        IF baseType IS Types.PNonExportedRecord THEN
            Errors.raise("non-exported RECORD type cannot be used in NEW");
        END;
        RETURN Code.makeSimpleExpression(
                arg.code() + " = " + baseType.initializer(cx, TRUE),
                NIL)
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    hasVarArgumnetWithCustomType(call);
    RETURN makeSymbol(makeStd("NEW", call))
END makeNew;

PROCEDURE lenArgumentCheck*(argType: Types.PType): BOOLEAN;
    RETURN (argType IS Types.PArray) OR (argType IS Types.PString)
END lenArgumentCheck;

PROCEDURE CallLen.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
VAR
    arg: Code.PExpression;
    argType: Types.PType;
BEGIN
    arg := checkSingleArgument(args, SELF, cx.types);
    argType := arg.type();
    IF ~SELF.check(argType) THEN
        Errors.raise("ARRAY or string is expected as an argument of LEN, got '"
                     + argType.description() + "'");
    END;
    RETURN Code.makeSimpleExpression(
        arg.code() + ".length",
        Types.basic.integer)
END CallLen.make;

PROCEDURE makeLen*(check: LenArgumentCheck): Symbols.PSymbol;
VAR
    call: POINTER TO CallLen;
BEGIN
    NEW(call);
    initStdCall(call);
    call.check := check;
    hasArgumentWithCustomType(call);
    RETURN makeSymbol(makeStd("LEN", call))
END makeLen;

PROCEDURE makeOdd(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        arg: Code.PExpression;
        code: STRING;
        constValue: Code.PConst;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.types);
        code := Code.adjustPrecedence(arg, Precedence.bitAnd);
        
        constValue := arg.constValue();
        IF constValue # NIL THEN
            constValue := Code.makeIntConst(
                ORD(ODD(constValue^(Code.IntConst).value)));
        END;

        RETURN Code.makeExpressionWithPrecedence(
            code + " & 1",
            Types.basic.bool,
            NIL,
            constValue,
            Precedence.bitAnd)
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    hasArgument(call, Types.basic.integer);
    RETURN makeSymbol(makeStd("ODD", call))
END makeOdd;

PROCEDURE makeAssert(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        arg: Code.PExpression;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.types);
        RETURN Code.makeSimpleExpression(
                cx.rtl.assertId() + "(" + arg.code() + ")",
                NIL)
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    hasArgument(call, Types.basic.bool);
    RETURN makeSymbol(makeStd("ASSERT", call))
END makeAssert;

PROCEDURE setBitImpl(name: STRING; bitOp: BinaryOpStr): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
            name: STRING;
            bitOp: BinaryOpStr
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        x, y: Code.PExpression;
        yValue: INTEGER;
        value: Code.PConst;
        valueCodeExp: Code.PExpression;
        valueCode: STRING;
        comment: STRING;
    BEGIN
        checkArguments(args, SELF.args, cx.types);
        ASSERT(JsArray.len(args) = 2);
        x := nthArgument(args, 0);
        y := nthArgument(args, 1);
        value := y.constValue();
        IF value = NIL THEN
            valueCodeExp := Operator.lsl(
                Code.makeExpression(
                    "1", 
                    Types.basic.integer,
                    NIL,
                    Code.makeIntConst(1)), 
                y,
                cx.rtl);
            valueCode := valueCodeExp.code();
        ELSE
            yValue := value^(Code.IntConst).value;
            IF (yValue < 0) OR (yValue > 31) THEN
                Errors.raise("value (0..31) expected as a second argument of " 
                             + SELF.name + ", got " + String.fromInt(yValue));
            END;
            comment := "bit: ";
            IF y.isTerm() THEN
                comment := comment + String.fromInt(yValue);
            ELSE
                comment := comment + Code.adjustPrecedence(y, Precedence.shift);
            END;
            yValue := LSL(1, yValue);
            valueCode := String.fromInt(yValue) + "/*" + comment + "*/";
        END;

        RETURN Code.makeSimpleExpression(
            SELF.bitOp(Code.adjustPrecedence(x, Precedence.assignment), valueCode),
            NIL)
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    call.name := name;
    call.bitOp := bitOp;
    hasVarArgument(call, Types.basic.set);
    hasArgument(call, Types.basic.integer);
    RETURN makeSymbol(makeStd(call.name, call))
END setBitImpl;

PROCEDURE checkVariableArgumentsCount(min, max: INTEGER; actual: JsArray.Type);
VAR
    len: INTEGER;
BEGIN
    len := JsArray.len(actual);
    IF len < min THEN
        Errors.raise("at least " + String.fromInt(min) + " argument expected, got " 
                     + String.fromInt(len));
    ELSIF len > max THEN
        Errors.raise("at most " + String.fromInt(max) + " arguments expected, got "
                     + String.fromInt(len));
    END;
END checkVariableArgumentsCount;

PROCEDURE incImpl(name: STRING; unary: STRING; incOp: BinaryOpStr): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
            name: STRING;
            unary: STRING;
            incOp: BinaryOpStr
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        x, y: Code.PExpression;
        code: STRING;
        value: Code.PConst;
        valueCode: STRING;
    BEGIN
        checkVariableArgumentsCount(1, 2, args);
        checkArgumentsType(args, SELF.args, NIL, cx.types);
        x := nthArgument(args, 0);
        IF JsArray.len(args) = 1 THEN
            code := SELF.unary + x.code();
        ELSE
            y := nthArgument(args, 1);
            value := y.constValue();
            IF value = NIL THEN
                valueCode := y.code();
            ELSE
                valueCode := String.fromInt(value^(Code.IntConst).value);
                IF ~y.isTerm() THEN
                    valueCode := valueCode + "/*" + y.code() + "*/";
                END;
            END;
            code := SELF.incOp(x.code(), valueCode);
        END;
        RETURN Code.makeSimpleExpression(code, NIL)
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    call.name := name;
    call.unary := unary;
    call.incOp := incOp;
    hasVarArgument(call, Types.basic.integer);
    hasArgument(call, Types.basic.integer);
    RETURN makeSymbol(makeStd(call.name, call))
END incImpl;

PROCEDURE inclOp(x, y: STRING): STRING;
    RETURN x + " |= " + y
END inclOp;

PROCEDURE exclOp(x, y: STRING): STRING;
    RETURN x + " &= ~(" + y + ")"
END exclOp;

PROCEDURE incOp(x, y: STRING): STRING;
    RETURN x + " += " + y
END incOp;

PROCEDURE decOp(x, y: STRING): STRING;
    RETURN x + " -= " + y
END decOp;

PROCEDURE makeAbs(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        arg: Code.PExpression;
        argType: Types.PType;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.types);
        argType := arg.type();
        IF ~JsArray.contains(Types.numeric, argType) THEN
            Errors.raise("type mismatch: expected numeric type, got '"
                         + argType.description() + "'");
        END;
        RETURN Code.makeSimpleExpression("Math.abs(" + arg.code() + ")", argType)
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    hasArgumentWithCustomType(call);
    RETURN makeSymbol(makeStd("ABS", call))
END makeAbs;

PROCEDURE makeFloor(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        arg: Code.PExpression;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.types);
        RETURN Code.makeSimpleExpression(
            "Math.floor(" + arg.code() + ")",
            Types.basic.integer)
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    hasArgument(call, Types.basic.real);
    RETURN makeSymbol(makeStd("FLOOR", call))
END makeFloor;

PROCEDURE makeFlt(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        arg: Code.PExpression;
        value: Code.PConst;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.types);
        value := arg.constValue();
        IF value # NIL THEN
            value := Code.makeRealConst(FLT(value^(Code.IntConst).value));
        END;
        RETURN Code.makeExpressionWithPrecedence(
                arg.code(), 
                Types.basic.real,
                NIL,
                value,
                arg.maxPrecedence())
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    hasArgument(call, Types.basic.integer);
    RETURN makeSymbol(makeStd("FLT", call))
END makeFlt;

PROCEDURE bitShiftImpl(name: STRING; op: BinaryOp): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
            name: STRING;
            op: BinaryOp
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        x, y: Code.PExpression;
    BEGIN
        checkArguments(args, SELF.args, cx.types);
        ASSERT(JsArray.len(args) = 2);
        x := nthArgument(args, 0);
        y := nthArgument(args, 1);
        RETURN SELF.op(x, y, cx.rtl)
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    call.name := name;
    call.op := op;
    hasArgument(call, Types.basic.integer);
    hasArgument(call, Types.basic.integer);
    RETURN makeSymbol(makeStd(call.name, call))
END bitShiftImpl;

PROCEDURE makeOrd(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        arg: Code.PExpression;
        argType: Types.PType;
        value: Code.PConst;
        code: STRING;
        ch: CHAR;
        result: Code.PExpression;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.types);
        argType := arg.type();
        IF (argType = Types.basic.ch) OR (argType = Types.basic.set) THEN
            value := arg.constValue();
            IF (value # NIL) & (argType = Types.basic.set) THEN
                value := Code.makeIntConst(ORD(value^(Code.SetConst).value));
            END;
            result := Code.makeExpression(arg.code(), Types.basic.integer, NIL, value);
        ELSIF argType = Types.basic.bool THEN
            code := Code.adjustPrecedence(arg, Precedence.conditional) 
                  + " ? 1 : 0";
            result := Code.makeExpressionWithPrecedence(
                code, 
                Types.basic.integer, 
                NIL, 
                arg.constValue(), 
                Precedence.conditional);
        ELSIF (argType IS Types.PString) 
            & (Types.stringAsChar(argType(Types.PString)^, ch)) THEN
            result := Code.makeExpression(
                String.fromInt(ORD(ch)), 
                Types.basic.integer,
                NIL,
                Code.makeIntConst(ORD(ch)));
        ELSE
            Errors.raise(
                "ORD function expects CHAR or BOOLEAN or SET as an argument, got '"
                + argType.description() + "'");
        END;
        RETURN result
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    hasArgumentWithCustomType(call);
    RETURN makeSymbol(makeStd("ORD", call))
END makeOrd;

PROCEDURE makeChr(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        arg: Code.PExpression;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.types);
        RETURN Code.makeSimpleExpression(arg.code(), Types.basic.ch)
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    hasArgument(call, Types.basic.integer);
    RETURN makeSymbol(makeStd("CHR", call))
END makeChr;

PROCEDURE makePack(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        x, y: Code.PExpression;
    BEGIN
        checkArguments(args, SELF.args, cx.types);
        x := nthArgument(args, 0);
        y := nthArgument(args, 1);
        RETURN Code.makeSimpleExpression(
            Operator.mulInplace(x, Operator.pow2(y), cx),
            NIL)
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    hasVarArgument(call, Types.basic.real);
    hasArgument(call, Types.basic.integer);
    RETURN makeSymbol(makeStd("PACK", call))
END makePack;

PROCEDURE makeUnpk(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;
    VAR
        call: POINTER TO CallImpl;

    PROCEDURE CallImpl.make(args: JsArray.Type; cx: LanguageContext.Type): Code.PExpression;
    VAR
        x, y: Code.PExpression;
    BEGIN
        checkArguments(args, SELF.args, cx.types);
        x := nthArgument(args, 0);
        y := nthArgument(args, 1);
        RETURN Code.makeSimpleExpression(
                Operator.assign(y, Operator.log2(x), cx) 
                + "; "
                + Operator.divInplace(x, Operator.pow2(y), cx),
            NIL)
    END CallImpl.make;
BEGIN
    NEW(call);
    initStdCall(call);
    hasVarArgument(call, Types.basic.real);
    hasVarArgument(call, Types.basic.integer);
    RETURN makeSymbol(makeStd("UNPK", call))
END makeUnpk;

PROCEDURE dumpProcArgs(proc: Type): STRING;
VAR
    result: STRING;
    len: INTEGER;
    arg: Object.PType;
BEGIN
    len := JsArray.len(proc.mArgs);
    IF len = 0 THEN
        IF proc.mResult # NIL THEN
            result := "()";
        END;
    ELSE
        result := "(";
        FOR i <- 0 TO len - 1 DO
            IF i # 0 THEN
                result := result + ", ";
            END;
            arg := JsArray.at(proc.mArgs, i);
            result := result + arg(Types.PProcedureArgument).type.description();
        END;
        result := result + ")";
    END;
    RETURN result
END dumpProcArgs;

PROCEDURE Type.description(): STRING;
VAR
    result: STRING;
BEGIN
    result := Types.typeName(SELF);
    IF LEN(result) = 0 THEN
        result := "PROCEDURE" + dumpProcArgs(SELF);
        IF SELF.mResult # NIL THEN
            result := result + ": " + SELF.mResult.description();
        END;
    END;
    RETURN result
END Type.description;

PROCEDURE Type.callGenerator(cx: LanguageContext.PType): PCallGenerator;
    RETURN makeProcCallGenerator(cx, SELF)
END Type.callGenerator;

PROCEDURE Type.define(args: JsArray.Type; result: Types.PType);
BEGIN
    SELF.mArgs := args;
    SELF.mResult := result;
END Type.define;

PROCEDURE Type.args(): JsArray.Type;
    RETURN SELF.mArgs
END Type.args;

PROCEDURE Type.result(): Types.PType;
    RETURN SELF.mResult
END Type.result;

PROCEDURE make*(name: STRING): PType;
VAR
    result: PType;
BEGIN
    NEW(result);
    result.name := name;
    RETURN result
END make;

BEGIN
    predefined := JsArray.make();
    JsArray.add(predefined, makeNew());
    JsArray.add(predefined, makeOdd());
    JsArray.add(predefined, makeAssert());
    JsArray.add(predefined, setBitImpl("INCL", inclOp));
    JsArray.add(predefined, setBitImpl("EXCL", exclOp));
    JsArray.add(predefined, incImpl("INC", "++", incOp));
    JsArray.add(predefined, incImpl("DEC", "--", decOp));
    JsArray.add(predefined, makeAbs());
    JsArray.add(predefined, makeFloor());
    JsArray.add(predefined, makeFlt());
    JsArray.add(predefined, bitShiftImpl("LSL", Operator.lsl));
    JsArray.add(predefined, bitShiftImpl("ASR", Operator.asr));
    JsArray.add(predefined, bitShiftImpl("ROR", Operator.ror));
    JsArray.add(predefined, makeOrd());
    JsArray.add(predefined, makeChr());
    JsArray.add(predefined, makePack());
    JsArray.add(predefined, makeUnpk());
END Procedure.
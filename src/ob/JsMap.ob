MODULE JsMap;
IMPORT JS, JsString, Object;
TYPE
    Type* = POINTER TO RECORD END;
    ForEachProc = PROCEDURE(key: JsString.Type; value: Object.PType; VAR closure: Object.Type);
    
    Strings* = POINTER TO RECORD END;
    ForEachStringProc = PROCEDURE(key: JsString.Type; value: JsString.Type; VAR closure: Object.Type);

PROCEDURE make*(): Type;
VAR
    result: Type;
BEGIN
    JS.do("result = {}");
    RETURN result    
END make;

PROCEDURE has*(m: Type; s: JsString.Type): BOOLEAN;
VAR
    result: BOOLEAN;
BEGIN
    JS.do("result = m.hasOwnProperty(s)");
    RETURN result
END has;

PROCEDURE find*(m: Type; s: JsString.Type; VAR r: Object.PType): BOOLEAN;
VAR
    result: BOOLEAN;
BEGIN
    JS.do("var value = m[s]; if (value !== undefined){result = true; r.set(value);}");
    RETURN result
END find;

PROCEDURE put*(m: Type; s: JsString.Type; o: Object.PType);
BEGIN
    JS.do("m[s] = o");
END put;

PROCEDURE erase*(m: Type; s: JsString.Type);
BEGIN
    JS.do("delete m[s]");
END erase;

PROCEDURE forEach*(m: Type; p: ForEachProc; VAR closure: Object.Type);
BEGIN
    JS.do("for(var key in m){p(key, m[key], closure)}");
END forEach;

PROCEDURE forEachString*(m: Strings; p: ForEachStringProc; VAR closure: Object.Type);
BEGIN
    JS.do("for(var key in m){p(key, m[key], closure)}");
END forEachString;

END JsMap.
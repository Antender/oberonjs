MODULE EberonContextProcedure;
IMPORT
    Chars, CodeGenerator,
    Context, ContextDesignator, ContextExpression, ContextHierarchy, ContextModule, 
    ContextProcedure, ContextType, 
    EberonConstructor, EberonContext, EberonContextDesignator, 
    EberonDynamicArray, EberonMap, EberonRecord, EberonTypes,
    Errors, Expression, ExpressionTree, LanguageContext, Object, Procedure, Record, Types, Variable;
TYPE
    ProcOrMethodDeclaration* = RECORD(ContextProcedure.Declaration)
        boundType: EberonRecord.PRecord;
        baseConstructorWasCalled: BOOLEAN;
        methodId: Context.PIdentdefInfo;
        methodType: EberonTypes.PMethodType;
        isConstructor: BOOLEAN;
        initedFields: ARRAY * OF STRING;
        type: Procedure.PType;
        endingId: STRING;
    END;
    PProcOrMethodDeclaration = POINTER TO ProcOrMethodDeclaration;

    ArgumentVariable = RECORD(Variable.ArgumentVariable)
    END;

    ProcOrMethodId* = RECORD(ContextHierarchy.Node)
        PROCEDURE handleIdentdef(id: EberonContext.PIdentdefInfo);

        maybeTypeId: STRING;
        type: EberonRecord.PRecord;
    END;

    BaseInit* = RECORD(ContextExpression.ExpressionHandler)
        initCall: Procedure.PCallGenerator;
        initField: STRING;
        typeOnDemand: EberonRecord.PRecord;
    END;

    FormalParameters* = RECORD(ContextProcedure.FormalParameters)
    END;

    FormalParametersProcDecl* = RECORD(ContextProcedure.FormalParametersProcDecl)
    END;

    ModuleDeclaration* = RECORD(ContextModule.Declaration)
    END;

    GetConstructorBoundTypeMsg = RECORD(ContextHierarchy.Message)
    END;
    GetConstructorSuperMsg = RECORD(ContextHierarchy.Message)
    END;

    InitFieldMsg = RECORD(ContextHierarchy.Message)
        PROCEDURE InitFieldMsg(id: STRING);

        id: STRING;
    END;

    MethodOrProcMsg* = RECORD(ContextHierarchy.Message)
        PROCEDURE MethodOrProcMsg(id: Context.PIdentdefInfo; type: EberonRecord.PRecord);
        
        id: Context.PIdentdefInfo; 
        type: EberonRecord.PRecord;
    END;

PROCEDURE superMethodCallGenerator(cx: LanguageContext.PType; type: Procedure.Type): Procedure.PCallGenerator;
BEGIN
    args <- Procedure.makeArgumentsCode(cx);
    args.write(Expression.makeSimple("this", NIL), NIL, NIL);
    RETURN Procedure.makeProcCallGeneratorWithCustomArgs(cx, type, args);
END;

PROCEDURE handleSuperCall(d: ProcOrMethodDeclaration): EberonContextDesignator.PSuperMethodInfo;
VAR
    procId: Types.PProcedureId;
BEGIN
    IF d.methodId = NIL THEN
        Errors.raise("SUPER can be used only in methods");
    END;

    baseType <- d.boundType.base(EberonRecord.PRecord);
    IF baseType = NIL THEN
        Errors.raise(
              "'" + d.boundType.description()
            + "' has no base type - SUPER cannot be used");
    END;

    id <- d.methodId.id();
    IF ~d.isConstructor THEN
        EberonRecord.requireMethodDefinition(baseType, id, "cannot use abstract method(s) in SUPER calls");
        procId := NEW Procedure.Id(NEW EberonTypes.MethodType(id, d.methodType.procType(), superMethodCallGenerator), id, FALSE);
    END;
    
    RETURN NEW EberonContextDesignator.SuperMethodInfo(
        procId,
        d.qualifyScope(baseType.scope) + baseType.description() + ".prototype." + id + ".call");
END;

PROCEDURE handleFieldInit(d: PProcOrMethodDeclaration; id: STRING): Procedure.PCallGenerator;
BEGIN
    IF ~(id IN d.boundType.fields) THEN
        Errors.raise("'" + id + "' is not record '" + d.boundType.description() + "' own field");
    END;        

    IF d.initedFields.indexOf(id) # -1 THEN
        Errors.raise("field '" + id + "' is already initialized");
    END;

    d.initedFields.add(id);        
    type <- d.boundType.fields[id].type();
    RETURN EberonConstructor.makeFieldInitCall(type, ContextHierarchy.makeLanguageContext(d), id);
END;

PROCEDURE handleTypePromotionMadeInSeparateStatement(VAR msg: ContextHierarchy.Message): BOOLEAN;
    RETURN EberonContextDesignator.breakTypePromotion(msg);
END;

PROCEDURE ProcOrMethodDeclaration.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
VAR
    result: Object.PType;
BEGIN
    IF msg IS EberonContextDesignator.GetMethodSelfMsg THEN
        IF SELF.boundType = NIL THEN
            Errors.raise("SELF can be used only in methods");
        END;
        result := SELF.boundType;
    ELSIF msg IS EberonContextDesignator.GetSelfAsPointerMsg THEN
        SELF.boundType.requireNewOnly();
        result := SELF.boundType;
    ELSIF msg IS GetConstructorBoundTypeMsg THEN
        result := SELF.boundType;
    ELSIF msg IS GetConstructorSuperMsg THEN
        SELF.baseConstructorWasCalled := TRUE;
        result := handleSuperCall(SELF);
    ELSIF msg IS EberonContextDesignator.GetMethodSuperMsg THEN
        IF SELF.isConstructor THEN
            Errors.raise("cannot call base constructor from procedure body (use '| SUPER' to pass parameters to base constructor)");
        END;
        result := handleSuperCall(SELF);
    ELSIF msg IS InitFieldMsg THEN
        result := handleFieldInit(SELF(POINTER), msg.id);
    ELSIF msg IS MethodOrProcMsg THEN
        id <- msg.id;
        type <- msg.type;
        IF type # NIL THEN
            SELF.methodId := id;
            SELF.boundType := type;
            SELF.isConstructor := type.name = id.id();
        END;

        ContextProcedure.handleIdentdef(SELF, id);
    ELSIF handleTypePromotionMadeInSeparateStatement(msg) THEN
        (* break message passing *)
    ELSE
        result := SUPER(msg);
    END;

    RETURN result;
END ProcOrMethodDeclaration.handleMessage;

PROCEDURE ProcOrMethodDeclaration.doProlog(): STRING;
VAR
    result: STRING;
BEGIN
    IF SELF.boundType # NIL THEN
        IF SELF.isConstructor THEN
            result := "function " + SELF.boundType.name + "(";
        ELSE
            result := SELF.boundType.name + ".prototype." + SELF.methodId.id() + " = function(";
        END;
    ELSE
        result := SUPER();
    END;
    RETURN result;
END;

PROCEDURE ProcOrMethodDeclaration.doEpilog(): STRING;
VAR
    result: STRING;
BEGIN
    IF (SELF.boundType # NIL) & ~SELF.isConstructor THEN
        result := ";" + Chars.ln;
    ELSE
        result := SUPER();
    END;
    RETURN result;
END;

PROCEDURE ProcOrMethodDeclaration.doBeginBody();
BEGIN
    SUPER();
    IF SELF.isConstructor THEN
        SELF.codeGenerator().write(
                SELF.boundType.baseConstructorCallCode
              + EberonRecord.fieldsInitializationCode(SELF.boundType, SELF(POINTER)));
    END;
END;

PROCEDURE ProcOrMethodDeclaration.doMakeArgumentVariable(arg: Types.ProcedureArgument; name: STRING): Types.PVariable;
VAR
    result: Types.PVariable;
BEGIN
    IF (arg.type IS Types.PRecord) OR (~arg.isVar & (arg.type IS Record.PPointer)) THEN
        result := NEW EberonContextDesignator.TypeNarrowVariable(arg.type, arg.isVar, ~arg.isVar, name);
    ELSE
        result := NEW ArgumentVariable(name, arg.type, arg.isVar);
    END;
    RETURN result;
END;

PROCEDURE ProcOrMethodDeclaration.doMakeReturnCode(e: Expression.PType; op: LanguageContext.CastOp): STRING;
VAR
    result: STRING;
BEGIN
    optimize <- FALSE;
    IF e.type() IS Types.PArray THEN
        IF Expression.isTemporary(e^) THEN
            optimize := TRUE;
        ELSE
            info <- e.info();
            optimize := (info^ IS Variable.Declared) & (info.scope = SELF.root().currentScope());
        END;
    END;
    
    IF optimize THEN
        result := e.code();
    ELSE
        result := SUPER(e, op);
    END;
    RETURN result;
END;

PROCEDURE ProcOrMethodDeclaration.setType(type: Types.PStorageType);
BEGIN
    IF SELF.methodId # NIL THEN
        t <- type(Procedure.PType);
        SELF.methodType := NEW EberonTypes.MethodType(SELF.methodId.id(), t, Procedure.makeProcCallGenerator);
        SELF.type := t;
    ELSE
        SUPER(type);
    END;
END;

PROCEDURE ProcOrMethodDeclaration.handleIdent(id: STRING);
BEGIN
    IF SELF.boundType = NIL THEN
        SUPER(id);
    ELSIF LEN(SELF.endingId) # 0 THEN
        SELF.endingId := SELF.endingId + "." + id;
    ELSE
        SELF.endingId := id;
    END;
END;

PROCEDURE ProcOrMethodDeclaration.endParse(): BOOLEAN;
VAR
    baseConstructor: Procedure.PType;
BEGIN
    result <- SUPER();
    IF result THEN
        IF SELF.boundType # NIL THEN
            IF LEN(SELF.endingId) # 0 THEN
                expected <- SELF.boundType.name + "." + SELF.id.id();
                IF SELF.endingId # expected THEN
                    Errors.raise(
                          "mismatched method names: expected '" 
                        + expected
                        + "' at the end (or nothing), got '" 
                        + SELF.endingId + "'");
                END;
            END;

            IF SELF.isConstructor THEN
                SELF.boundType.defineConstructor(SELF.methodType.procType());

                base <- SELF.boundType.base;
                IF base # NIL THEN
                    baseConstructor := EberonRecord.constructor(base^(EberonRecord.Record));
                END;

                IF ~SELF.baseConstructorWasCalled & (baseConstructor # NIL) & (LEN(baseConstructor.args()) # 0) THEN
                    Errors.raise("base record constructor has parameters but was not called (use '| SUPER' to pass parameters to base constructor)");
                END;
                IF SELF.baseConstructorWasCalled & ((baseConstructor = NIL) OR (LEN(baseConstructor.args()) = 0)) THEN
                    Errors.raise("base record constructor has no parameters and will be called automatically (do not use '| SUPER' to call base constructor)");
                END;
            ELSE
                SELF.boundType.defineMethod(SELF.methodId, SELF.methodType);
            END;
        END;
    END;
    RETURN result;
END;

PROCEDURE ArgumentVariable.isReadOnly(): BOOLEAN;
    RETURN ~SELF.var;
END;

PROCEDURE ProcOrMethodId.handleIdent(id: STRING);
BEGIN
    SELF.maybeTypeId := id;
END;

PROCEDURE ProcOrMethodId.handleLiteral(s: STRING);
BEGIN
    ss <- ContextHierarchy.getSymbolAndScope(SELF.root()^, SELF.maybeTypeId);
    type <- ExpressionTree.unwrapType(ss.symbol().info());
    IF ~(type IS EberonRecord.PRecord) THEN
        Errors.raise(
              "RECORD type expected in method declaration, got '"
            + type.description() + "'");
    ELSIF ss.scope() # SELF.root().currentScope() THEN
        Errors.raise(
              "method should be defined in the same scope as its bound type '"
            + SELF.maybeTypeId
            + "'");
    ELSE
        SELF.type := type;
    END;
END;

PROCEDURE ProcOrMethodId.handleIdentdef(id: EberonContext.PIdentdefInfo);
BEGIN
    IF (SELF.type # NIL) & id.exported() THEN
        Errors.raise("method implementation cannot be exported: " + id.id());
    END;
    EberonContext.checkOrdinaryExport(id^, "procedure");
    void <- SELF.handleMessage(NEW MethodOrProcMsg(id, SELF.type)^);
END;

PROCEDURE baseInitType(VAR b: BaseInit): EberonRecord.PRecord;
BEGIN
    IF b.typeOnDemand = NIL THEN
        b.typeOnDemand := b.handleMessage(NEW GetConstructorBoundTypeMsg()^)(EberonRecord.PRecord);
    END;
    RETURN b.typeOnDemand;
END;

PROCEDURE BaseInit.codeGenerator(): CodeGenerator.PIGenerator;
    RETURN CodeGenerator.nullGenerator;
END;

PROCEDURE BaseInit.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
VAR
    result: Object.PType;
BEGIN
    IF msg IS ContextDesignator.BeginCallMsg THEN
    ELSIF msg IS ContextDesignator.EndCallMsg THEN
        e <- SELF.initCall.end();
        IF LEN(SELF.initField) # 0 THEN
            baseInitType(SELF).setFieldInitializationCode(SELF.initField, e.code());
        ELSE
            baseInitType(SELF).setBaseConstructorCallCode(e.code());
        END;
    ELSE
        result := SUPER(msg);
    END;
    RETURN result;
END;

PROCEDURE BaseInit.handleIdent(id: STRING);
BEGIN
    SELF.initField := id;
    SELF.initCall := SELF.handleMessage(NEW InitFieldMsg(id)^)(Procedure.PCallGenerator);
END;

PROCEDURE BaseInit.handleExpression(e: Expression.PType);
BEGIN
    SELF.initCall.handleArgument(e);
END;

PROCEDURE BaseInit.handleLiteral(s: STRING);
BEGIN
    IF s = "SUPER" THEN
        ms <- SELF.handleMessage(NEW GetConstructorSuperMsg()^);
        SELF.initCall := EberonConstructor.makeBaseConstructorCall(
            baseInitType(SELF).base(EberonRecord.PRecord), 
            ContextHierarchy.makeLanguageContext(SELF(POINTER))
            );
    END;
END;

PROCEDURE assertArgumentIsNotNonVarDynamicArray(VAR msg: ContextHierarchy.Message);
VAR
    type: Types.PStorageType;
BEGIN
    IF msg IS ContextProcedure.AddArgumentMsg THEN
        arg <- msg.arg;
        IF ~arg.isVar THEN
            type := arg.type;
            WHILE type IS Types.PArray DO
                IF type IS EberonDynamicArray.PDynamicArray THEN
                    Errors.raise("dynamic array has no use as non-VAR argument '" + msg.name + "'");
                END;
                type := type(Types.PArray).elementsType;
            END;
        END;
    END;
END;

PROCEDURE FormalParameters.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
BEGIN
    assertArgumentIsNotNonVarDynamicArray(msg);
    RETURN SUPER(msg);
END;

PROCEDURE isEberonArrayOrMap(type: Types.PStorageType): BOOLEAN;
    RETURN (type IS EberonDynamicArray.PDynamicArray) 
        OR (type IS EberonMap.PType);
END;

PROCEDURE FormalParameters.doCheckResultType(type: Types.PStorageType);
BEGIN
    IF ~isEberonArrayOrMap(type) THEN
        SUPER(type);
    END;
END;

PROCEDURE FormalParametersProcDecl.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
BEGIN
    assertArgumentIsNotNonVarDynamicArray(msg);
    RETURN SUPER(msg);
END;

PROCEDURE FormalParametersProcDecl.doCheckResultType(type: Types.PStorageType);
BEGIN
    IF ~isEberonArrayOrMap(type) THEN
        SUPER(type);
    END;
END;

PROCEDURE ModuleDeclaration.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
VAR
    result: Object.PType;
BEGIN
    IF ~handleTypePromotionMadeInSeparateStatement(msg) THEN
        result := SUPER(msg);
    END;
    RETURN result;
END;

PROCEDURE InitFieldMsg.InitFieldMsg(id: STRING)
    | id(id);
END;

PROCEDURE MethodOrProcMsg.MethodOrProcMsg(id: Context.PIdentdefInfo; type: EberonRecord.PRecord)
    | id(id),
      type(type);
END;

END EberonContextProcedure.
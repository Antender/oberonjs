MODULE EberonCast;
IMPORT Cast, Code, EberonMap, EberonRtl, EberonString, EberonDynamicArray, OberonRtl, Types;
TYPE
    CastOpToDynamicArray = RECORD (Cast.CastOpArray)
    END;

    CastOpToMap = RECORD (Cast.CastOp)
    END;

VAR
    castOpToDynamicArray: POINTER TO CastOpToDynamicArray;
    castOpToMap: POINTER TO CastOpToMap;

PROCEDURE CastOpToDynamicArray.make(rtl: OberonRtl.PType; e: Code.PExpression): Code.PExpression;
    RETURN Code.makeSimpleExpression(Cast.cloneArray(e.type()(Types.PArray)^, e.code(), rtl^), NIL)
END CastOpToDynamicArray.make;

PROCEDURE copyArray(t: Types.Array; leftCode, rightCode: STRING; rtl: OberonRtl.Type): STRING;
VAR
    result: STRING;
BEGIN
    IF Types.arrayElementsType(t).isScalar() THEN
        result := "Array.prototype.splice.apply(" + leftCode + ", [0, Number.MAX_VALUE].concat(" + rightCode + "))";
    ELSIF Types.arrayBaseElementsType(t).isScalar() THEN 
        result := rtl.copyArrayOfScalars(rightCode, leftCode);
    ELSE
        result := rtl.copyArrayOfRecords(rightCode, leftCode);
    END;
    RETURN result
END copyArray;

PROCEDURE CastOpToDynamicArray.assign(rtl: OberonRtl.PType; left, right: Code.PExpression): STRING;
    RETURN copyArray(left.type()(Types.PArray)^, left.code(), right.code(), rtl^)
END;

PROCEDURE CastOpToMap.make(rtl: OberonRtl.PType; e: Code.PExpression): Code.PExpression;
    RETURN e;
END;

PROCEDURE CastOpToMap.assign(rtl: OberonRtl.PType; left, right: Code.PExpression): STRING;
    (* TODO: support non-scalar MAPs *)
    RETURN rtl(EberonRtl.PType).copyMapOfScalars(right.code(), left.code());
END;

PROCEDURE CastOpToMap.clone(rtl: OberonRtl.PType; e: Code.PExpression): STRING;
    (* TODO: support non-scalar MAPs *)
    RETURN rtl(EberonRtl.PType).cloneMapOfScalars(e.code());
END;

PROCEDURE isOpenCharArray(type: Types.PType): BOOLEAN;
    RETURN (type IS Types.POpenArray) 
         & (Types.arrayElementsType(type^) = Types.basic.ch)
END isOpenCharArray;

PROCEDURE dynamicArrayElementsMatch(t1: Types.PType; t2: Types.PType): BOOLEAN;
VAR
    result: BOOLEAN;
BEGIN
    IF (t1 IS EberonDynamicArray.PDynamicArray) & (t2 IS EberonDynamicArray.PDynamicArray) THEN
        result := dynamicArrayElementsMatch(Types.arrayElementsType(t1^), 
                                            Types.arrayElementsType(t2^));
    ELSE
        result := Cast.areTypesExactlyMatch(t1, t2);
    END;
    RETURN result
END dynamicArrayElementsMatch;

PROCEDURE implicit*(from, to: Types.PType; toVar: BOOLEAN; ops: Cast.Operations; VAR op: Cast.PCastOp): INTEGER;
VAR
    result: INTEGER;
BEGIN
    IF   ((from = EberonString.string) & ((to IS Types.PString) OR isOpenCharArray(to))
      OR ((from IS Types.PString) & (to = EberonString.string))) THEN
        IF toVar THEN 
            result := Cast.errVarParameter;
        ELSE
            op := Cast.doNothing;
            result := Cast.errNo;
        END;
    ELSIF (from IS Types.PArray) & (to IS EberonDynamicArray.PDynamicArray)
        & dynamicArrayElementsMatch(Types.arrayElementsType(from^), 
                                    Types.arrayElementsType(to^)) THEN
        IF toVar THEN
            IF ~(from IS EberonDynamicArray.PDynamicArray) THEN
                result := Cast.errVarParameter;
            ELSE
                op := Cast.doNothing;
                result := Cast.errNo;
            END
        ELSE
            op := castOpToDynamicArray;
            result := Cast.errNo;
        END;
    ELSIF (from IS EberonMap.PType) & (to IS EberonMap.PType) THEN
        IF Cast.areTypesExactlyMatch(from.valueType, to.valueType) THEN
            op := castOpToMap;
            result := Cast.errNo;
        ELSE
            result := Cast.err;
        END;
    ELSE
        result := Cast.implicit(from, to, toVar, ops, op);
    END;
    RETURN result
END implicit;

BEGIN
    NEW(castOpToDynamicArray);
    NEW(castOpToMap);
END EberonCast.
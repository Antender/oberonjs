MODULE EberonOperator;
IMPORT Code, CodePrecedence, OberonRtl, Operator, Types;

PROCEDURE opAddStr(left, right: Code.PConst): Code.PConst;
    RETURN Code.makeStringConst(left^(Code.StringConst).value
                              + right^(Code.StringConst).value)
END opAddStr;

PROCEDURE opEqualStr(left, right: Code.PConst): Code.PConst;
    RETURN Code.makeIntConst(ORD(left^(Code.StringConst).value
                                 = right^(Code.StringConst).value))
END opEqualStr;

PROCEDURE opNotEqualStr(left, right: Code.PConst): Code.PConst;
    RETURN Code.makeIntConst(ORD(left^(Code.StringConst).value
                                 # right^(Code.StringConst).value))
END opNotEqualStr;

PROCEDURE opLessStr(left, right: Code.PConst): Code.PConst;
    RETURN Code.makeIntConst(ORD(left^(Code.StringConst).value
                               < right^(Code.StringConst).value))
END opLessStr;

PROCEDURE opGreaterStr(left, right: Code.PConst): Code.PConst;
    RETURN Code.makeIntConst(ORD(left^(Code.StringConst).value
                               > right^(Code.StringConst).value))
END opGreaterStr;

PROCEDURE opLessEqualStr(left, right: Code.PConst): Code.PConst;
    RETURN Code.makeIntConst(ORD(left^(Code.StringConst).value
                              <= right^(Code.StringConst).value))
END opLessEqualStr;

PROCEDURE opGraterEqualStr(left, right: Code.PConst): Code.PConst;
    RETURN Code.makeIntConst(ORD(left^(Code.StringConst).value
                              >= right^(Code.StringConst).value))
END opGraterEqualStr;

PROCEDURE addStr*(left, right: Code.PExpression; rtl: OberonRtl.PType): Code.PExpression;
    RETURN Operator.binaryWithCode(left, right, rtl, opAddStr, " + ", CodePrecedence.addSub)
END addStr;

PROCEDURE equalStr*(left, right: Code.PExpression; rtl: OberonRtl.PType): Code.PExpression;
    RETURN Operator.equal(left, right, rtl, opEqualStr, " == ")
END equalStr;

PROCEDURE notEqualStr*(left, right: Code.PExpression; rtl: OberonRtl.PType): Code.PExpression;
    RETURN Operator.equal(left, right, rtl, opNotEqualStr, " != ")
END notEqualStr;

PROCEDURE lessStr*(left, right: Code.PExpression; rtl: OberonRtl.PType): Code.PExpression;
    RETURN Operator.relational(left, right, rtl, opLessStr, " < ")
END lessStr;

PROCEDURE greaterStr*(left, right: Code.PExpression; rtl: OberonRtl.PType): Code.PExpression;
    RETURN Operator.relational(left, right, rtl, opGreaterStr, " > ")
END greaterStr;

PROCEDURE lessEqualStr*(left, right: Code.PExpression; rtl: OberonRtl.PType): Code.PExpression;
    RETURN Operator.relational(left, right, rtl, opLessEqualStr, " <= ")
END lessEqualStr;

PROCEDURE greaterEqualStr*(left, right: Code.PExpression; rtl: OberonRtl.PType): Code.PExpression;
    RETURN Operator.relational(left, right, rtl, opGraterEqualStr, " >= ")
END greaterEqualStr;

PROCEDURE inMap*(left, right: Code.PExpression; rtl: OberonRtl.PType): Code.PExpression;
    RETURN Code.makeSimpleExpression("Object.prototype.hasOwnProperty.call(" + right.code() + ", " + left.code() + ")",
                                     Types.basic.bool);
END;

END EberonOperator.
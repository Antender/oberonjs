MODULE EberonOperator;
IMPORT 
    Cast, CodePrecedence, ConstValue, Designator, 
    EberonMap, EberonString, Expression, LanguageContext, 
    OberonRtl, Operator, Record, Types;
TYPE
    CastOpRecord = RECORD(Cast.CastOpRecord)
    END;
VAR
    castOperations*: Cast.Operations;

PROCEDURE opAddStr(left, right: ConstValue.PType): ConstValue.PType;
    RETURN NEW ConstValue.String(left^(ConstValue.String).value
                               + right^(ConstValue.String).value)
END opAddStr;

PROCEDURE opEqualStr(left, right: ConstValue.PType): ConstValue.PType;
    RETURN NEW ConstValue.Int(ORD(left^(ConstValue.String).value
                                  = right^(ConstValue.String).value))
END opEqualStr;

PROCEDURE opNotEqualStr(left, right: ConstValue.PType): ConstValue.PType;
    RETURN NEW ConstValue.Int(ORD(left^(ConstValue.String).value
                                  # right^(ConstValue.String).value))
END opNotEqualStr;

PROCEDURE opLessStr(left, right: ConstValue.PType): ConstValue.PType;
    RETURN NEW ConstValue.Int(ORD(left^(ConstValue.String).value
                                < right^(ConstValue.String).value))
END opLessStr;

PROCEDURE opGreaterStr(left, right: ConstValue.PType): ConstValue.PType;
    RETURN NEW ConstValue.Int(ORD(left^(ConstValue.String).value
                                > right^(ConstValue.String).value))
END opGreaterStr;

PROCEDURE opLessEqualStr(left, right: ConstValue.PType): ConstValue.PType;
    RETURN NEW ConstValue.Int(ORD(left^(ConstValue.String).value
                               <= right^(ConstValue.String).value))
END opLessEqualStr;

PROCEDURE opGraterEqualStr(left, right: ConstValue.PType): ConstValue.PType;
    RETURN NEW ConstValue.Int(ORD(left^(ConstValue.String).value
                               >= right^(ConstValue.String).value))
END opGraterEqualStr;

PROCEDURE addStr*(left, right: Expression.PType): Expression.PType;
BEGIN
    result <- Operator.binaryWithCode(left, right, opAddStr, " + ", CodePrecedence.addSub);
    l <- left.type();
    r <- right.type();
    IF (l # r) & ((l = EberonString.string) OR (r = EberonString.string)) THEN
        (* change expression type to STRING *)
        result := NEW Expression.Type(result.code(), EberonString.string, result.designator(), result.constValue(), result.maxPrecedence());
    END;
    RETURN result;
END;

PROCEDURE equalStr*(left, right: Expression.PType; cx: LanguageContext.PType): Expression.PType;
    RETURN Operator.equal(left, right, opEqualStr, Operator.equalCode)
END equalStr;

PROCEDURE notEqualStr*(left, right: Expression.PType; cx: LanguageContext.PType): Expression.PType;
    RETURN Operator.equal(left, right, opNotEqualStr, Operator.notEqualCode)
END notEqualStr;

PROCEDURE lessStr*(left, right: Expression.PType; cx: LanguageContext.PType): Expression.PType;
    RETURN Operator.relational(left, right, opLessStr, " < ")
END lessStr;

PROCEDURE greaterStr*(left, right: Expression.PType; cx: LanguageContext.PType): Expression.PType;
    RETURN Operator.relational(left, right, opGreaterStr, " > ")
END greaterStr;

PROCEDURE lessEqualStr*(left, right: Expression.PType; cx: LanguageContext.PType): Expression.PType;
    RETURN Operator.relational(left, right, opLessEqualStr, " <= ")
END lessEqualStr;

PROCEDURE greaterEqualStr*(left, right: Expression.PType; cx: LanguageContext.PType): Expression.PType;
    RETURN Operator.relational(left, right, opGraterEqualStr, " >= ")
END greaterEqualStr;

PROCEDURE inMap*(left, right: Expression.PType; cx: LanguageContext.PType): Expression.PType;
    RETURN Expression.makeSimple("Object.prototype.hasOwnProperty.call(" + right.code() + ", " + left.code() + ")",
                                 Types.basic.bool);
END;

PROCEDURE generateTypeInfo*(type: Types.PType): STRING;
VAR
    result: STRING;
BEGIN
    IF type IS EberonMap.PType THEN
        result := "{map: " + generateTypeInfo(type.elementsType) + "}";
    ELSE
        result := Record.generateTypeInfo(type);
    END;
    RETURN result;
END;

PROCEDURE CastOpRecord.assign(cx: LanguageContext.PType; left: Designator.Type; right: Expression.PType): STRING;
VAR
    result: STRING;
BEGIN
    info <- left.info();
    IF info^ IS EberonMap.ElementVariable THEN
        (* optimize the case when the temporary is used - do not clone it 
           but only if types exactly match - derived temporary still must be cloned *)
        IF (right.designator() = NIL) & (left.type() = right.type()) THEN
            result := info.lval + " = " + right.code();
        ELSE
            result := info.lval + " = " 
                    + cx.language.rtl.clone(right.code(), 
                                            generateTypeInfo(left.type()), 
                                            Record.constructor(cx.cx^, left.type()(Record.PType)^));
        END;
    ELSE
        result := SUPER(cx, left, right);
    END;
    RETURN result;
END;

BEGIN
    castOperations.castToUint8 := NEW Operator.CastToUint8();
    castOperations.castToRecord := NEW CastOpRecord();
END EberonOperator.
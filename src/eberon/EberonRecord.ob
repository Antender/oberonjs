MODULE EberonRecord;
IMPORT 
    Cast, Context, EberonContext, EberonTypes, Errors, JS, Object, Scope, ScopeBase, Stream, String, Types;
CONST
    instantiateForVar* = 0;    
    instantiateForNew* = 1;    
    instantiateForCopy* = 2;    
TYPE
    MethodIds = RECORD
        ids: ARRAY * OF STRING;
    END;
    PMethodIds = POINTER TO MethodIds;
    MapOfMethodIds = MAP OF PMethodIds;
    MapOfFields = MAP OF Types.PField;

    Record* = RECORD(Types.Record)
        PROCEDURE Record(name: STRING; cons: STRING; scope: ScopeBase.PType);

        PROCEDURE declareConstructor(type: Types.PDefinedProcedure; exported: BOOLEAN);
        PROCEDURE addMethod(methodId: Context.PIdentdefInfo; type: Types.PProcedure);
        PROCEDURE defineConstructor(type: Types.PDefinedProcedure);
        PROCEDURE defineMethod(methodId: Context.PIdentdefInfo; type: EberonTypes.PMethodType);
        PROCEDURE requireNewOnly();
        PROCEDURE setBaseConstructorCallCode(code: STRING);
        PROCEDURE setFieldInitializationCode(field: STRING; code: STRING);
        PROCEDURE setRecordInitializationCode(baseConstructorCallCode: STRING);

        customConstructor-: Types.PDefinedProcedure;
        customConstructorExported: BOOLEAN;
        customConstructorDefined: BOOLEAN;
        customInitedfields-: ARRAY * OF STRING;
        finalized: BOOLEAN;
        declaredMethods: MapOfFields;
        definedMethods: ARRAY * OF STRING;
        abstractMethods: ARRAY * OF STRING;
        instantiated: BOOLEAN;
        createByNewOnly: BOOLEAN;
        declaredAsVariable: BOOLEAN;
        lazyDefinitions: MapOfMethodIds;
        nonExportedMethods: ARRAY * OF STRING;
        baseConstructorCallCode-: STRING;
        fieldsInit: MAP OF STRING;
        fieldsInitOrder: ARRAY * OF STRING;
        lastFieldInit: INTEGER;
    END;
    PRecord* = POINTER TO Record;

    RecordField* = RECORD(Types.RecordField)
        PROCEDURE RecordField*(identdef: Context.PIdentdefInfo; type: Types.PStorageType; record: PRecord);

        record: PRecord;
    END;

    RecordFieldAsMethod = RECORD(Types.RecordField)
    END;
    PRecordFieldAsMethod = POINTER TO RecordFieldAsMethod;

PROCEDURE assertNotReadOnly*(isReadObly: BOOLEAN; method: STRING; class: STRING);
BEGIN
    IF isReadObly THEN
        Errors.raise("method '" + method + "' cannot be applied to non-VAR " + class);
    END;
END;

PROCEDURE cannotInstantiateErrMsg(r: Types.Record): STRING;
    RETURN "cannot instantiate '" 
         + r.name 
         + "' because it has abstract method(s)";
END;

PROCEDURE hasMethodDefinition(r: PRecord; id: STRING): BOOLEAN;
BEGIN
    type <- r;
    WHILE (type # NIL) & (type.definedMethods.indexOf(id) = -1) DO
        type := type.base(PRecord);
    END;
    RETURN type # NIL;
END;

PROCEDURE findMethodDeclaration(r: PRecord; id: STRING): Types.PField;
VAR
    result: Types.PField;
BEGIN
    type <- r;
    WHILE (type # NIL) & (result = NIL) DO
        IF id IN type.declaredMethods THEN
            result := type.declaredMethods[id];
        ELSE
            type := type.base(PRecord);
        END;
    END;
    RETURN result;
END;

PROCEDURE ensureMethodDefinitionsForEach(key: STRING; ids: ARRAY OF STRING; r: PRecord; VAR result: ARRAY * OF STRING);
VAR
    report: ARRAY * OF STRING;
BEGIN
    FOR i <- 0 TO LEN(ids) - 1 DO
        m <- ids[i];
        IF ~hasMethodDefinition(r, m) THEN
            report.add(m);
        END;
    END;

    IF LEN(report) # 0 THEN
        result.add(key + ": " + String.join(report, ", "));
    END;
END;

PROCEDURE ensureMethodDefinitions(r: PRecord; reasons: MapOfMethodIds);
VAR
    result: ARRAY * OF STRING;
BEGIN
    FOREACH v, k IN reasons DO
        ensureMethodDefinitionsForEach(k, v.ids, r, result);
    END;
    IF LEN(result) # 0 THEN
        Errors.raise(String.join(result, "; "));
    END;
END;

PROCEDURE requireMethodDefinition*(r: PRecord; id: STRING; reason: STRING);
VAR
    existingIds: Object.PType;
    reasons: MapOfMethodIds;

    PROCEDURE makeIds(): PMethodIds;
    BEGIN
        result <- NEW MethodIds();
        result.ids.add(id);
        RETURN result;
    END;

    PROCEDURE addIfNotThere(VAR ids: ARRAY * OF STRING);
    BEGIN
        IF ids.indexOf(id) = -1 THEN
            ids.add(id);
        END;
    END;

BEGIN
    IF findMethodDeclaration(r, id) = NIL THEN
        Errors.raise("there is no method '" + id + "' in base type(s)");
    END;

    IF r.finalized THEN
        reasons[reason] := makeIds();
        ensureMethodDefinitions(r, reasons);
    ELSE
        IF ~(reason IN r.lazyDefinitions) THEN
            r.lazyDefinitions[reason] := makeIds();
        ELSE
            addIfNotThere(r.lazyDefinitions[reason].ids);
        END;
    END;
END;

PROCEDURE ensureNonAbstract(r: PRecord);
    PROCEDURE require(declaredMethods: MapOfFields; base: PRecord);
    BEGIN
        FOREACH v, k IN declaredMethods DO
            IF ~hasMethodDefinition(r, k) THEN
                requireMethodDefinition(base, k, cannotInstantiateErrMsg(r^));
            END;
        END;
    END;
BEGIN
    IF LEN(r.abstractMethods) # 0 THEN
        Errors.raise(cannotInstantiateErrMsg(r^) + ": " + String.join(r.abstractMethods, ", "));
    END;

    baseType <- r.base(PRecord);
    WHILE baseType # NIL DO
        IF ~baseType.finalized THEN
            require(baseType.declaredMethods, baseType)
        END;
        baseType := baseType.base(PRecord);
    END;
END;

PROCEDURE ensureVariableCanBeDeclared(r: PRecord);
BEGIN
    type <- r;
    WHILE type # NIL DO
        IF type.createByNewOnly THEN
            Errors.raise(
                    "cannot declare a variable of type '" 
                  + type.name + "' (and derived types) "
                  + "because SELF(POINTER) was used in its method(s)");
        END;
        type := type.base(PRecord);
    END;
END;

PROCEDURE RecordFieldAsMethod.asVar(leadCode: STRING; isReadOnly: BOOLEAN; cx: Context.Type): Types.PId;
    RETURN NEW EberonTypes.MethodVariable(SELF.type()); 
END;

PROCEDURE constructor*(r: Record): Types.PDefinedProcedure;
BEGIN
    result <- r.customConstructor;
    IF (result = NIL) & (r.base # NIL) THEN
        result := constructor(r.base(PRecord)^);
    END;
    RETURN result;
END;

PROCEDURE hasParameterizedConstructor*(r: Record): BOOLEAN;
BEGIN
    c <- constructor(r);
    RETURN (c # NIL) & (LEN(c.args()) # 0);
END;

PROCEDURE canBeCreatedInAnotherModule(r: Record): BOOLEAN;
    RETURN (r.customConstructor = NIL) OR r.customConstructorExported;
END;

PROCEDURE canBeCreatedInContext(cx: Context.Type; r: Record): BOOLEAN;
    RETURN (LEN(cx.qualifyScope(r.scope)) = 0)
        OR canBeCreatedInAnotherModule(r);
END;

PROCEDURE Record.setBase(type: Types.PRecord);
BEGIN
    IF (type.scope # SELF.scope) & (SELF.scope^ IS Scope.Module) 
        & ~canBeCreatedInAnotherModule(type(PRecord)^) THEN
        Errors.raise("cannot extend '" + type.name + "' - its constructor was not exported")
    END;
    SUPER(type);
END;

PROCEDURE ensureCanBeInstantiated*(cx: Context.Type; r: PRecord; type: INTEGER);
BEGIN
    IF r.finalized THEN
        ensureNonAbstract(r);
        IF (type # instantiateForCopy) & ~canBeCreatedInContext(cx, r^) THEN
            Errors.raise("cannot instantiate '" + r.name + "' - its constructor was not exported");
        END;

        IF type # instantiateForNew THEN
            ensureVariableCanBeDeclared(r);
        END;
    ELSE
        r.instantiated := TRUE;
        IF type # instantiateForNew THEN
            r.declaredAsVariable := TRUE;
        END;
    END;
END;

PROCEDURE Record.codeForNew(cx: Context.Type): STRING;
BEGIN
    IF hasParameterizedConstructor(SELF) THEN
        Errors.raise("cannot use procedure NEW for '" + SELF.name + "' because it has constructor with parameters, use operator NEW instead");
    END;
    RETURN SUPER(cx);
END;

PROCEDURE Record.initializer(cx: Context.Type): STRING;
BEGIN
    ensureCanBeInstantiated(cx, SELF(POINTER), instantiateForNew);
    RETURN SUPER(cx);
END;

PROCEDURE Record.findSymbol(id: STRING): Types.PField;
BEGIN
    result <- findMethodDeclaration(SELF(POINTER), id);
    IF result = NIL THEN
        result := SUPER(id);
    END;
    RETURN result;
END;

PROCEDURE Record.addField(f: Types.PField);
BEGIN
    id <- f.id();
    IF findMethodDeclaration(SELF(POINTER), id) # NIL THEN
        Errors.raise(
            "cannot declare field, record already has method '" + id +"'");
    END;

    type <- f.type();
    IF (type IS PRecord) 
        & (type.customConstructor # NIL) 
        & (LEN(type.customConstructor.args()) # 0) THEN
        SELF.customInitedfields.add(id);
    END;
    SELF.fieldsInitOrder.add(id);

    SUPER(f);
END;

PROCEDURE Record.addMethod(methodId: Context.PIdentdefInfo; type: Types.PProcedure);
VAR
    msg: STRING;
BEGIN
    id <- methodId.id();
    existingField <- SELF.findSymbol(id);
    IF existingField # NIL THEN
        IF existingField.type()^ IS EberonTypes.MethodType THEN
            msg := "cannot declare a new method '" 
                 + id 
                 + "': method already was declared";
        ELSE
            msg := "cannot declare method, record already has field '" + id + "'";
        END;
        Errors.raise(msg);
    END;

    SELF.declaredMethods[id] := NEW RecordFieldAsMethod(methodId, type);
    IF ~methodId.exported() THEN
        SELF.nonExportedMethods.add(id);
    END;
END;

PROCEDURE Record.defineMethod(methodId: Context.PIdentdefInfo; type: EberonTypes.PMethodType);
VAR 
    existingType: Types.PDefinedProcedure;
BEGIN
    id <- methodId.id();
    IF SELF.definedMethods.indexOf(id) # -1 THEN
        Errors.raise("method '" + SELF.name + "." + id + "' already defined");
    END;

    existingField <- SELF.findSymbol(id);
    IF existingField # NIL THEN
        t <- existingField.type();
        IF t^ IS EberonTypes.MethodType THEN
            existingType := t.procType();
        END;
    END;
    IF existingType = NIL THEN
        Errors.raise("'" + SELF.name + "' has no declaration for method '" + id + "'");
    END;

    addType <- type.procType();
    IF ~Cast.areProceduresMatch(existingType, addType) THEN
        Errors.raise("overridden method '" + id + "' signature mismatch: should be '"
                   + existingType.description() + "', got '" 
                   + addType.description() + "'");
    END;
    
    SELF.definedMethods.add(id);
END;

PROCEDURE Record.requireNewOnly();
BEGIN
    SELF.createByNewOnly := TRUE;
END;

PROCEDURE Record.setBaseConstructorCallCode(code: STRING);
BEGIN
    SELF.baseConstructorCallCode := code;
END;

PROCEDURE Record.setFieldInitializationCode(field: STRING; code: STRING);
BEGIN
    index <- SELF.fieldsInitOrder.indexOf(field);
    IF index < SELF.lastFieldInit THEN
        Errors.raise("field '" + field + "' must be initialized before '" 
                   + SELF.fieldsInitOrder[SELF.lastFieldInit] + "'");
    ELSE
        SELF.lastFieldInit := index;
    END;
    SELF.fieldsInit[field] := code;
END;

PROCEDURE Record.setRecordInitializationCode(baseConstructorCallCode: STRING);
BEGIN
    SELF.baseConstructorCallCode := baseConstructorCallCode;
END;

PROCEDURE Record.declareConstructor(type: Types.PDefinedProcedure; exported: BOOLEAN);
BEGIN
    IF SELF.customConstructor # NIL THEN
        Errors.raise("constructor '" + SELF.name + "' already declared");
    END;
    IF type.result() # NIL THEN
        Errors.raise("constructor '" + SELF.name + "' cannot have result type specified");
    END;

    SELF.customConstructor := type;
    SELF.customConstructorExported := exported;
END;

PROCEDURE Record.defineConstructor(type: Types.PDefinedProcedure);
BEGIN
    IF SELF.customConstructor = NIL THEN
        Errors.raise("constructor was not declared for '" + SELF.name +"'");
    END;
    IF SELF.customConstructorDefined THEN
        Errors.raise("constructor already defined for '" + SELF.name +"'");
    END;
    IF ~Cast.areProceduresMatch(SELF.customConstructor, type) THEN
        Errors.raise("constructor '" + SELF.name + "' signature mismatch: declared as '"
                   + SELF.customConstructor.description() + "' but defined as '" 
                   + type.description() + "'");
    END;
    SELF.customConstructorDefined := TRUE;
END;

PROCEDURE collectAbstractMethods(VAR r: Record);
TYPE
    Strings = ARRAY * OF STRING;
VAR
    methods: Strings;

    PROCEDURE keys(m: MapOfFields): Strings;
    VAR
        result: Strings;
    BEGIN
        FOREACH v, k IN m DO
            result.add(k);
        END;
        RETURN result;
    END;
BEGIN
    selfMethods <- keys(r.declaredMethods);
    baseType <- r.base(PRecord);
    IF baseType # NIL THEN
        JS.do("methods = baseType.abstractMethods.concat(selfMethods);");
    ELSE
        methods := selfMethods;
    END;

    FOR i <- 0 TO LEN(methods) - 1 DO
        m <- methods[i];
        IF r.definedMethods.indexOf(m) = -1 THEN
            r.abstractMethods.add(m);
        END;
    END;
END;

PROCEDURE checkIfFieldsInited(r: Record);
VAR
    fieldsWereNotInited: ARRAY * OF STRING;
BEGIN
    FOR i <- 0 TO LEN(r.customInitedfields) - 1 DO
        f <- r.customInitedfields[i];
        IF ~(f IN r.fieldsInit) THEN
            fieldsWereNotInited.add(f);
        END;
    END;

    IF LEN(fieldsWereNotInited) # 0 THEN
        Errors.raise("constructor '" + r.name + "' must initialize fields: " 
                   + String.join(fieldsWereNotInited, ", "));
    END;
END;

PROCEDURE Record.finalize();
BEGIN
    SELF.finalized := TRUE;

    IF (SELF.customConstructor # NIL) & ~SELF.customConstructorDefined THEN
        Errors.raise("constructor was declared for '" + SELF.name + "' but was not defined");
    END;

    collectAbstractMethods(SELF);
    IF SELF.instantiated THEN
        ensureNonAbstract(SELF(POINTER));
    END;
    
    IF SELF.declaredAsVariable THEN
        ensureVariableCanBeDeclared(SELF(POINTER));
    END;
    
    ensureMethodDefinitions(SELF(POINTER), SELF.lazyDefinitions);

    FOR i <- 0 TO LEN(SELF.nonExportedMethods) - 1 DO
        SELF.declaredMethods.remove(SELF.nonExportedMethods[i]);
    END;
    SELF.nonExportedMethods.clear();

    checkIfFieldsInited(SELF);

    SUPER();
END;

PROCEDURE RecordField.asVar(leadCode: STRING; isReadOnly: BOOLEAN; cx: Context.Type): Types.PId;
BEGIN
    actualReadOnly <- isReadOnly;
    IF ~actualReadOnly & (LEN(cx.qualifyScope(Types.recordScope(SELF.record^))) # 0) THEN
        actualReadOnly := SELF.identdef()(EberonContext.PIdentdefInfo).isReadOnly();
    END;
    RETURN SUPER(leadCode, actualReadOnly, cx); 
END;

PROCEDURE Record.Record(name: STRING; cons: STRING; scope: ScopeBase.PType)
    | SUPER(name, cons, scope),
      lastFieldInit(-1);
END;

PROCEDURE fieldsInitializationCode*(r: PRecord; cx: Context.PType): STRING;
VAR
    code: STRING;
    result: STRING;
BEGIN
    FOREACH f, key IN r.fields DO
        type <- f.type()(Types.PStorageType);
        IF key IN r.fieldsInit THEN
            code := r.fieldsInit[key];
        ELSE
            code := "this." + Types.mangleField(key) 
                    + " = " + type.initializer(cx^);
        END;
        result := result + code + ";" + Stream.kCR;
    END;
    RETURN result;
END;

PROCEDURE RecordField.RecordField(identdef: Context.PIdentdefInfo; type: Types.PStorageType; record: PRecord)
    | SUPER(identdef, type),
      record(record);
END;

END EberonRecord.
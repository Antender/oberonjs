MODULE EberonMap;
IMPORT 
    Context, EberonRtl, Expression, EberonString, EberonRecord, EberonTypes, Errors, LanguageContext, Procedure, Record, Types;
CONST
    removeMethodName = "remove";
    clearMethodName = "clear";
TYPE
    Type* = RECORD(Types.StorageType)
        PROCEDURE Type*(type: Types.PType);

        valueType*: Types.PType;
    END;
    PType* = POINTER TO Type;

    Method = RECORD(Procedure.Std)
    END;

    MethodRemoveField = RECORD(EberonTypes.MethodField)
        PROCEDURE MethodRemoveField();
    END;

    MethodClearField = RECORD(EberonTypes.MethodField)
        PROCEDURE MethodClearField();
    END;

    MapMethod = RECORD(Method)
    END;

    MethodRemove = RECORD(MapMethod)
        PROCEDURE MethodRemove();
    END;

    MethodClear = RECORD(MapMethod)
        PROCEDURE MethodClear();
    END;

    MethodCallRemove = RECORD(Procedure.StdCall)
    END;

    MethodCallClear = RECORD(Procedure.StdCall)
    END;

PROCEDURE Type.initializer(cx: Context.Type): STRING;
    RETURN "{}";
END;

PROCEDURE Type.description(): STRING;
    RETURN "MAP OF " + SELF.valueType.description();
END;

PROCEDURE Type.Type(valueType: Types.PType)
    | valueType(valueType);
END;

PROCEDURE Type.denote(id: STRING; isReadObly: BOOLEAN): Types.PField;
VAR
    result: Types.PField;

    PROCEDURE assertReadOnly();
    BEGIN
        EberonRecord.assertNotReadOnly(isReadObly, id, "MAP");
    END;
BEGIN
    IF id = removeMethodName THEN
        assertReadOnly();
        result := NEW MethodRemoveField();
    ELSIF id = clearMethodName THEN
        assertReadOnly();
        result := NEW MethodClearField();
    ELSE
        result := SUPER(id, isReadObly);
    END;
    RETURN result;
END;

PROCEDURE Type.isScalar(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE MethodCallRemove.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
BEGIN
    argCode <- Procedure.makeArgumentsCode(cx);
    arg <- Procedure.checkSingleArgument(args, SELF, cx.types, argCode);
    RETURN Expression.makeSimple("[" + argCode.result() + "]", NIL)
END;        

PROCEDURE MethodCallClear.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
BEGIN
    Procedure.checkArgumentsCount(LEN(args), 0);
    RETURN Expression.makeSimple("", NIL);
END;

PROCEDURE MapMethod.description(): STRING;
    RETURN "MAP's method '" + SELF.name + "'";
END;

PROCEDURE MethodRemove.MethodRemove()
    | SUPER(removeMethodName, NIL);
END;

PROCEDURE MethodClear.MethodClear()
    | SUPER(clearMethodName, NIL);
END;

PROCEDURE MethodRemove.callGenerator(cx: LanguageContext.PType): Procedure.PCallGenerator;
BEGIN
    call <- NEW MethodCallRemove();
    a <- NEW Types.ProcedureArgument(NEW Types.OpenArray(Types.basic.ch), FALSE);
    call.args.add(a);
    RETURN Procedure.makeCallGenerator(call, cx)
END;

PROCEDURE MethodClear.callGenerator(cx: LanguageContext.PType): Procedure.PCallGenerator;
BEGIN
    call <- NEW MethodCallClear();
    RETURN Procedure.makeCallGenerator(call, cx)
END;

PROCEDURE MethodRemoveField.MethodRemoveField()
    | SUPER(NEW MethodRemove());
END;

PROCEDURE MethodClearField.MethodClearField()
    | SUPER(NEW MethodClear());
END;

PROCEDURE MethodRemoveField.designatorCode(leadCode: STRING; cx: Context.Type): Types.PFieldCode;
    RETURN NEW Types.FieldCode("delete " + leadCode, "", "");
END;

PROCEDURE MethodClearField.designatorCode(leadCode: STRING; cx: Context.Type): Types.PFieldCode;
    RETURN NEW Types.FieldCode(cx.rtl()(EberonRtl.PType).clearMap(leadCode), "", "");
END;

END EberonMap.


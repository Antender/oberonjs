MODULE EberonTypes;
IMPORT Context, LanguageContext, Procedure, Record, Types;

TYPE
    CallGenerator = PROCEDURE(cx: LanguageContext.PType; type: Procedure.Type): Procedure.PCallGenerator;

    MethodType* = RECORD(Procedure.Std)
        PROCEDURE MethodType*(id: STRING; t: Procedure.PType; call: CallGenerator);

        PROCEDURE procType*(): Procedure.PType;

        type: Procedure.PType;
        call: CallGenerator
    END;
    PMethodType* = POINTER TO MethodType;

    MethodVariable* = RECORD(Types.ProcedureId)
    END;

    PMethod* = POINTER TO Procedure.Std;

    MethodField* = RECORD(Types.Field)
        PROCEDURE MethodField*(method: PMethod);

        method: PMethod
    END;

PROCEDURE MethodType.designatorCode(id: STRING): STRING;
    RETURN id
END MethodType.designatorCode;

PROCEDURE MethodType.procType(): Procedure.PType;
    RETURN SELF.type
END MethodType.procType;

PROCEDURE MethodType.description(): STRING;
    RETURN "method '" + SELF.name + "'"
END MethodType.description;

PROCEDURE MethodType.callGenerator(cx: LanguageContext.PType): Procedure.PCallGenerator;
    RETURN SELF.call(cx, SELF.type^)
END MethodType.callGenerator;

PROCEDURE MethodType.MethodType(id: STRING; t: Procedure.PType; call: CallGenerator)
    | SUPER(id, NIL);
BEGIN
    SELF.type := t;
    SELF.call := call;
END;

PROCEDURE MethodVariable.idType(): STRING;
    RETURN "method"
END MethodVariable.idType;

PROCEDURE MethodField.MethodField(method: PMethod)
    | method(method);
END;

PROCEDURE MethodField.id(): STRING;
    RETURN SELF.method.name
END;

PROCEDURE MethodField.exported(): BOOLEAN;
    RETURN FALSE
END;

PROCEDURE MethodField.type(): Types.PStorageType;
    RETURN SELF.method
END;

PROCEDURE MethodField.asVar(leadCode: STRING; isReadOnly: BOOLEAN; cx: Context.Type): Types.PId;
    RETURN NEW MethodVariable(SELF.method)
END;

PROCEDURE MethodField.designatorCode(leadCode: STRING; cx: Context.Type): Types.PFieldCode;
    RETURN NEW Types.FieldCode(leadCode + "." + Record.mangleField(SELF.method.name), "", "");
END;

END EberonTypes.
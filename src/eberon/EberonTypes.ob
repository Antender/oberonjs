MODULE EberonTypes;
IMPORT LanguageContext, Procedure, Types;

TYPE
    CallGenerator = PROCEDURE(cx: LanguageContext.PType; type: Types.DefinedProcedure): Procedure.PCallGenerator;

    MethodType* = RECORD(Procedure.Std)
        PROCEDURE procType(): Types.PProcedure;
        PROCEDURE args(): Types.ProcedureArguments;
        PROCEDURE result(): Types.PType;
        PROCEDURE procDescription(): STRING;

        type: Types.PDefinedProcedure;
        call: CallGenerator
    END;
    PMethodType = POINTER TO MethodType;

    MethodVariable* = RECORD(Types.ProcedureId)
    END;

PROCEDURE MethodType.designatorCode(id: STRING): STRING;
    RETURN id
END MethodType.designatorCode;

PROCEDURE MethodType.procType(): Types.PProcedure;
    RETURN SELF.type
END MethodType.procType;

PROCEDURE MethodType.args(): Types.ProcedureArguments;
    RETURN SELF.type.args()
END MethodType.args;

PROCEDURE MethodType.result(): Types.PType;
    RETURN SELF.type.result()
END MethodType.result;

PROCEDURE MethodType.description(): STRING;
    RETURN "method '" + SELF.name + "'"
END MethodType.description;

PROCEDURE MethodType.procDescription(): STRING;
    RETURN SELF.type.description()
END MethodType.procDescription;

PROCEDURE MethodType.callGenerator(cx: LanguageContext.PType): Procedure.PCallGenerator;
    RETURN SELF.call(cx, SELF.type^)
END MethodType.callGenerator;

PROCEDURE makeMethodType*(id: STRING; t: Types.PDefinedProcedure; call: CallGenerator): PMethodType;
VAR
    result: PMethodType;
BEGIN
    NEW(result);
    result.name := id;
    result.type := t;
    result.call := call;
    RETURN result
END makeMethodType;

PROCEDURE MethodVariable.idType(): STRING;
    RETURN "method"
END MethodVariable.idType;

PROCEDURE makeMethod*(type: Types.PType): Types.PProcedureId;
VAR
    result: POINTER TO MethodVariable;
BEGIN
    NEW(result);
    result.type := type;
    RETURN result
END makeMethod;

END EberonTypes.
MODULE EberonContextInPlace;
IMPORT
    CodeGenerator, 
    ContextExpression, ContextHierarchy, 
    EberonContextDesignator, EberonContextExpression, EberonContextLoop,
    EberonRecord, Errors, Expression, LanguageContext, Symbols, Types;
TYPE
    VariableInit* = RECORD(ContextExpression.ExpressionHandler)
        PROCEDURE onParsed();

        id: STRING;
        code: STRING;
        symbol: Symbols.PSymbol;
    END;

    VariableInitFor* = RECORD(VariableInit)
    END;

PROCEDURE VariableInit.codeGenerator(): CodeGenerator.PIGenerator;
    RETURN CodeGenerator.nullGenerator;
END;

PROCEDURE VariableInit.handleIdent(id: STRING);
BEGIN
    SELF.id := id;
END;

PROCEDURE VariableInit.handleLiteral(s: STRING);
BEGIN
    SELF.code := "var " + CodeGenerator.mangleId(SELF.id) + " = ";
END;

PROCEDURE VariableInit.handleExpression(e: Expression.PType);
VAR
    resultType: Types.PStorageType;
BEGIN
    SELF.code := SELF.code + EberonContextExpression.initFromRValue(SELF(POINTER), e, "variable '" + SELF.id + "'", resultType);
    v <- NEW EberonContextDesignator.TypeNarrowVariable(resultType, FALSE, FALSE, SELF.id);
    SELF.symbol := NEW Symbols.Symbol(SELF.id, v);
END;

PROCEDURE VariableInit.onParsed();
BEGIN
    SELF.parent().codeGenerator().write(SELF.code);
END;

PROCEDURE VariableInit.endParse(): BOOLEAN;
BEGIN
    result <- FALSE;
    IF SELF.symbol # NIL THEN
        SELF.root().currentScope().addSymbol(SELF.symbol, FALSE);
        SELF.onParsed();
        result := TRUE;
    END;
    RETURN result;
END;

PROCEDURE VariableInitFor.onParsed();
BEGIN
    SELF.parent()^(EberonContextLoop.For).handleInPlaceInit(SELF.symbol, SELF.code);
END;

END EberonContextInPlace.
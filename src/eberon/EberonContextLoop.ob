MODULE EberonContextLoop;
IMPORT
    Chars, CodeGenerator, 
    ContextLoop, ContextExpression, ContextHierarchy,
    Errors, Expression,
    EberonContextDesignator, 
    EberonMap, EberonOperatorScopes, EberonScope, EberonString,
    Object, Scope, Symbols, Types, Variable;
TYPE
    While* = RECORD(ContextLoop.While)
        PROCEDURE While(parent: ContextHierarchy.PNode);

        scopes: EberonOperatorScopes.Type;
    END;

    Repeat* = RECORD(ContextLoop.Repeat)
        PROCEDURE Repeat(parent: ContextHierarchy.PNode);
    END;

    For* = RECORD(ContextLoop.For)
        PROCEDURE For(parent: ContextHierarchy.PNode);

        PROCEDURE handleInPlaceInit*(symbol: Symbols.PSymbol; code: STRING);
    END;

    ForEachVariable = RECORD(Variable.TypedVariable)
    END;

    ForEach* = RECORD(ContextExpression.ExpressionHandler)
        PROCEDURE ForEach(parent: ContextHierarchy.PNode);

        keyId, valueId: STRING;
        code: CodeGenerator.PIGenerator;
        scopeWasCreated: BOOLEAN;
    END;

PROCEDURE While.While(parent: ContextHierarchy.PNode)
    | SUPER(parent),
      scopes(parent);
END;

PROCEDURE While.handleLiteral(s: STRING);
BEGIN
    SUPER(s);
    IF s = "DO" THEN
        SELF.scopes.doThen();
    ELSIF s = "ELSIF" THEN
        SELF.scopes.alternate();
    END;
END;

PROCEDURE While.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
VAR
    result: Object.PType;
BEGIN
    IF ~SELF.scopes.handleMessage(msg) THEN
        result := SUPER(msg);
    END;
    RETURN result;
END;

PROCEDURE While.endParse(): BOOLEAN;
BEGIN
    SELF.scopes.reset();
    RETURN SUPER();
END;

PROCEDURE Repeat.Repeat(parent: ContextHierarchy.PNode)
    | SUPER(parent);
BEGIN
    EberonScope.startOperatorScope(SELF);
END;

PROCEDURE Repeat.endParse(): BOOLEAN;
BEGIN
    EberonScope.endOperatorScope(SELF);
    RETURN TRUE;
END;

PROCEDURE For.For(parent: ContextHierarchy.PNode)
    | SUPER(parent);
BEGIN
    EberonScope.startOperatorScope(SELF);
END;

PROCEDURE For.handleInPlaceInit(symbol: Symbols.PSymbol; code: STRING);
BEGIN
    SELF.doHandleInitCode(symbol.id(), "for (" + code);
    SELF.doHandleInitExpression(symbol.info()(Types.PVariable).type());
END;

PROCEDURE For.endParse(): BOOLEAN;
BEGIN
    EberonScope.endOperatorScope(SELF);
    RETURN SUPER();
END;

PROCEDURE ForEachVariable.idType(): STRING;
    RETURN "FOR variable";
END;

PROCEDURE ForEachVariable.referenceCode(): STRING;
    RETURN "";
END;

PROCEDURE ForEachVariable.isReference(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE ForEachVariable.isReadOnly(): BOOLEAN;
    RETURN TRUE;
END;

PROCEDURE ForEach.ForEach(parent: ContextHierarchy.PNode)
    | SUPER(parent),
      code(CodeGenerator.nullGenerator);
END;

PROCEDURE ForEach.handleIdent(id: STRING);
BEGIN
    IF LEN(SELF.keyId) = 0 THEN
        SELF.keyId := id;
    ELSE
        SELF.valueId := id;
    END;
END;

PROCEDURE ForEach.codeGenerator(): CodeGenerator.PIGenerator;
    RETURN SELF.code;
END;

PROCEDURE makeVariable(id: STRING; type: Types.PStorageType; scope: Scope.PType);
BEGIN
    v <- NEW ForEachVariable(type);
    s <- NEW Symbols.Symbol(id, v);
    scope.addSymbol(s, FALSE);
END;

PROCEDURE ForEach.handleExpression(e: Expression.PType);
VAR
    elementsType: Types.PStorageType;
    isString: BOOLEAN;
BEGIN
    type <- e.type();
    IF type IS Types.PArray THEN
        elementsType := type.elementsType;
    ELSIF (type = EberonString.string) OR Types.isString(type) THEN
        elementsType := Types.basic.ch;
        isString := TRUE;
    ELSE
        Errors.raise("expression of type ARRAY, STRING or MAP is expected in FOR, got '" 
                     + type.description() + "'");
    END;

    root <- SELF.root();
    currentScope <- root.currentScope();
    scope <- EberonScope.makeOperator(currentScope, root.language().stdSymbols);
    root.pushScope(scope);
    SELF.scopeWasCreated := TRUE;

    code <- SELF.parent().codeGenerator();
    mapVar <- currentScope.generateTempVar("seq");
    code.write("var " + mapVar + " = " + e.code() + ";" + Chars.ln);
    
    keyId <- SELF.keyId;
    valueId <- SELF.valueId;
    IF LEN(valueId) = 0 THEN
        valueId := keyId;
        keyId := currentScope.generateTempVar("key");
    END;

    isMap <- type IS EberonMap.PType;

    IF isMap THEN
        code.write("for(var " + keyId + " in " + mapVar + ")");
    ELSE
        code.write("for(var " + keyId + " = 0; " + keyId + " < " + mapVar + ".length; ++" + keyId + ")");
    END;

    code.openScope();
    code.write("var " + valueId + " = " + mapVar);
    IF isString THEN
        code.write(".charCodeAt(" + keyId + ")");
    ELSE
        code.write("[" + keyId + "];");
    END;
    code.write(Chars.ln);
    SELF.code := code;

    keyType <- Types.basic.integer;
    IF isMap THEN
        keyType := EberonString.string;
    END;

    IF LEN(valueId) # 0 THEN
        makeVariable(keyId, keyType, scope);
    END;
    makeVariable(valueId, elementsType, scope);
END;

PROCEDURE ForEach.endParse(): BOOLEAN;
BEGIN
    SELF.code.closeScope("");
    IF SELF.scopeWasCreated THEN
        SELF.root().popScope();
    END;
    RETURN TRUE;
END;

END EberonContextLoop.
MODULE EberonScope;
IMPORT Errors, Scope, Symbols;
TYPE
    Operator = RECORD(Scope.Type)
        parent: Scope.PType
    END;
    POperator = POINTER TO Operator;

PROCEDURE Operator.name(): STRING;
    RETURN "operator"
END Operator.name;

PROCEDURE Operator.addSymbol(s: Symbols.PSymbol; exported: BOOLEAN);
BEGIN
    id <- s.id();
    parent <- SELF.parent;
    WHILE parent # NIL DO
        found <- parent.findSymbol(id);
        IF found # NIL THEN
            Errors.raise("'" + id + "' already declared in " + found.scope().name() + " scope");
        END;

        next <- parent;
        IF next IS POperator THEN
            parent := next.parent;
        ELSE
            parent := NIL;
        END;
    END;
    SUPER(s, exported);
END Operator.addSymbol;

PROCEDURE Operator.generateTempVar(pattern: STRING): STRING;
    RETURN SELF.parent.generateTempVar(pattern);
END;

PROCEDURE makeOperator*(parent: Scope.PType; stdSymbols: Symbols.Map): Scope.PType;
BEGIN
    result <- NEW Operator(stdSymbols);
    result.parent := parent;
    RETURN result
END;

END EberonScope.
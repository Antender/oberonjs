MODULE EberonOperatorScopes;
IMPORT
    ContextHierarchy, 
    EberonContextDesignator, EberonContextProcedure, EberonScope,
    EberonTypePromotion,
    Scope;
TYPE
    Type* = RECORD
        PROCEDURE Type*(cx: ContextHierarchy.PNode);

        PROCEDURE handleMessage*(VAR msg: ContextHierarchy.Message): BOOLEAN;
        PROCEDURE doThen*();
        PROCEDURE alternate*();
        PROCEDURE reset*();

        context: ContextHierarchy.PNode;
        scope: Scope.PType;
        ignorePromotions: BOOLEAN;
        typePromotion: EberonTypePromotion.PType;
        typePromotions: ARRAY * OF EberonTypePromotion.PType;
    END;

PROCEDURE Type.Type(cx: ContextHierarchy.PNode)
    | context(cx);
BEGIN
    SELF.alternate();
END;

PROCEDURE Type.handleMessage(VAR msg: ContextHierarchy.Message): BOOLEAN;
BEGIN
    result <- FALSE;

    IF SELF.ignorePromotions THEN
    ELSIF msg IS EberonContextDesignator.TransferPromotedTypesMsg THEN
        result := TRUE;
    ELSIF msg IS EberonContextDesignator.PromoteTypeMsg THEN
        SELF.typePromotion := NEW EberonTypePromotion.ForVariable(msg.info, msg.type, FALSE);
        SELF.typePromotions.add(SELF.typePromotion);
        result := TRUE;
    ELSIF msg IS EberonContextProcedure.BeginTypePromotionOrMsg THEN
        tp <- NEW EberonTypePromotion.Or(FALSE);
        SELF.typePromotion := tp;
        SELF.typePromotions.add(tp);
        msg.result := tp;
        result := TRUE;
    END;
    RETURN result;
END;

PROCEDURE Type.doThen();
BEGIN
    IF SELF.typePromotion # NIL THEN
        SELF.typePromotion.and();
    END;
    SELF.ignorePromotions := TRUE;
END;

PROCEDURE Type.alternate();
BEGIN
    root <- SELF.context.root();
    IF SELF.scope # NIL THEN
        root.popScope();
    END;
    SELF.scope := EberonScope.makeOperator(
        root.currentScope(),
        root.language().stdSymbols);
    root.pushScope(SELF.scope);

    IF SELF.typePromotion # NIL THEN
        SELF.typePromotion.reset();
        SELF.typePromotion.or();
        SELF.typePromotion := NIL;
    END;
    SELF.ignorePromotions := FALSE;
END;

PROCEDURE Type.reset();
BEGIN
    SELF.context.root().popScope();
    FOR i <- 0 TO LEN(SELF.typePromotions) - 1 DO
        SELF.typePromotions[i].reset();
    END;
END;

END EberonOperatorScopes.
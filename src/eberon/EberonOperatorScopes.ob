MODULE EberonOperatorScopes;
IMPORT
    ContextHierarchy, EberonContextTypePromotion, EberonScope, Scope;
TYPE
    PRoot = POINTER TO ContextHierarchy.Root;

    Type* = RECORD
        PROCEDURE Type*(cx: PRoot);

        PROCEDURE handleMessage*(VAR msg: ContextHierarchy.Message): BOOLEAN;
        PROCEDURE doThen*();
        PROCEDURE alternate*();
        PROCEDURE reset*();

        root: PRoot;
        typePromotion: EberonContextTypePromotion.Type;
        scope: Scope.PType;
    END;
    PType* = POINTER TO Type;

PROCEDURE newScope(root: PRoot): Scope.PType;
BEGIN
    scope <- EberonScope.makeOperator(
        root.currentScope(),
        root.language().stdSymbols);
    root.pushScope(scope);
    RETURN scope;
END;    

PROCEDURE Type.Type(root: PRoot)
    | root(root),
      scope(newScope(root));
BEGIN
END;

PROCEDURE Type.handleMessage(VAR msg: ContextHierarchy.Message): BOOLEAN;
    RETURN SELF.typePromotion.handleMessage(msg);
END;

PROCEDURE Type.doThen();
BEGIN
    SELF.typePromotion.doThen();
END;

PROCEDURE Type.alternate();
BEGIN
    root <- SELF.root;
    IF SELF.scope # NIL THEN
        root.popScope();
    END;
    SELF.scope := newScope(root);

    SELF.typePromotion.alternate();
END;

PROCEDURE Type.reset();
BEGIN
    SELF.root.popScope();
    SELF.typePromotion.reset();
END;

END EberonOperatorScopes.
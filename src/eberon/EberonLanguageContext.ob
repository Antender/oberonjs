MODULE EberonLanguageContext;
IMPORT 
	EberonContextDesignator, EberonMap, EberonTypePromotion, Expression, LanguageContext, Types;
TYPE
	CodeTraits* = RECORD(LanguageContext.CodeTraits)
	END;

PROCEDURE CodeTraits.referenceCode(VAR info: Types.Id): STRING;
	RETURN 
		info IS EberonContextDesignator.SelfVariable 
				? "this"
		: info IS EberonTypePromotion.Variable 			
				? info.id()
		: ((info IS EberonMap.ElementVariable) & ~info.elementType.isScalar()) 
				? info.rval
		: SUPER(info);
END;

PROCEDURE CodeTraits.assign(VAR info: Types.Id; right: Expression.PType): STRING;
VAR
    result: STRING;
BEGIN
	IF info IS EberonMap.ElementVariable THEN
    	result := info.lval + " = " + Expression.deref(right).code();
    ELSE
    	result := SUPER(info, right);
    END;
    RETURN result;
END;

END EberonLanguageContext.
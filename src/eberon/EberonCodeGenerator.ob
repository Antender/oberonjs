MODULE EberonCodeGenerator;
IMPORT CodeGenerator, String;
TYPE
    IGenerator = RECORD(CodeGenerator.IGenerator)
        PROCEDURE makeInsertion(): INTEGER;
        PROCEDURE insert(insertion: INTEGER; code: STRING);
    END;

    NullGenerator = RECORD(IGenerator)
    END;

    Insertion = RECORD
        pos: INTEGER;
        indent: INTEGER;
        code: STRING;
    END;

    Generator = RECORD(IGenerator)
        indent: CodeGenerator.Indent;
        insertions: ARRAY * OF Insertion;
    END;
    PGenerator = POINTER TO Generator;

VAR
    nullGenerator*: NullGenerator;

PROCEDURE NullGenerator.write(s: STRING); END;

PROCEDURE NullGenerator.openScope(); END;

PROCEDURE NullGenerator.closeScope(ending: STRING); END;

PROCEDURE NullGenerator.result(): STRING;
    RETURN "";
END;

PROCEDURE NullGenerator.makeInsertion(): INTEGER;
    RETURN 0;
END;

PROCEDURE NullGenerator.insert(insertion: INTEGER; code: STRING);
END;

PROCEDURE Generator.makeInsertion(): INTEGER;
VAR
    insertion: Insertion;
BEGIN
    insertion.pos := LEN(SELF.indent.result);
    insertion.indent := SELF.indent.indent;
    result <- LEN(SELF.insertions);
    SELF.insertions.add(insertion);
    RETURN result;
END;

PROCEDURE Generator.insert(insertion: INTEGER; code: STRING);
BEGIN
    SELF.insertions[insertion].code := code;
END;

PROCEDURE Generator.write(s: STRING);
BEGIN
    CodeGenerator.addIndentedText(s, SELF.indent);
END;

PROCEDURE Generator.openScope();
BEGIN
    CodeGenerator.openScope(SELF.indent);
END;

PROCEDURE Generator.closeScope(ending: STRING);
BEGIN
    CodeGenerator.closeScope(ending, SELF.indent);
END;

PROCEDURE Generator.result(): STRING;
VAR
    result: STRING;
BEGIN
    pos <- 0;
    FOR i <- 0 TO LEN(SELF.insertions) - 1 DO
        nextPos <- SELF.insertions[i].pos;
        result := result 
                + String.substr(SELF.indent.result, pos, nextPos - pos)
                + CodeGenerator.indentText(SELF.insertions[i].code, SELF.insertions[i].indent);
        pos := nextPos;
    END;
    result := result + String.substr(SELF.indent.result, pos, LEN(SELF.indent.result) - pos);
    RETURN result
END;

PROCEDURE makeGenerator*(): PGenerator;
VAR
    result: PGenerator;
BEGIN
    NEW(result);
    RETURN result;
END;

END EberonCodeGenerator.

MODULE EberonArray;
IMPORT 
    EberonTypes, Errors, Expression, LanguageContext, Procedure, Types;
CONST
    methodNameIndexOf = "indexOf";
TYPE
    Method* = RECORD(Procedure.Std)
    END;

    MethodIndexOf = RECORD(Method)
        PROCEDURE MethodIndexOf(elementsType: Types.PStorageType);

        elementsType: Types.PStorageType
    END;

    MethodCallIndexOf = RECORD(Procedure.StdCall)
    END;

    StaticArray* = RECORD(Types.StaticArray)
    END;

    OpenArray* = RECORD(Types.OpenArray)
    END;

PROCEDURE Method.description(): STRING;
    RETURN "array method '" + SELF.name + "'"
END Method.description;

PROCEDURE MethodIndexOf.MethodIndexOf(elementsType: Types.PStorageType)
    | SUPER(methodNameIndexOf, NIL),
      elementsType(elementsType);
BEGIN
END;

PROCEDURE MethodIndexOf.callGenerator(cx: LanguageContext.PType): Procedure.PCallGenerator;
BEGIN
    call <- NEW MethodCallIndexOf();
    a <- NEW Types.ProcedureArgument(SELF.elementsType, FALSE);
    call.args.add(a);
    RETURN Procedure.makeCallGenerator(call, cx)
END MethodIndexOf.callGenerator;

PROCEDURE MethodCallIndexOf.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
BEGIN
    argCode <- Procedure.makeArgumentsCode(cx);
    argType <- Procedure.checkSingleArgument(args, SELF, cx.language.types, argCode).type();
    RETURN Expression.makeSimple("(" + argCode.result() + ")", Types.basic.integer)
END MethodCallIndexOf.make;

PROCEDURE denoteMethod*(id: STRING; elementsType: Types.PStorageType): Types.PField;
VAR
    result: Types.PField;
BEGIN
    IF id = methodNameIndexOf THEN
        result := NEW EberonTypes.MethodField(NEW MethodIndexOf(elementsType));
    END;
    RETURN result
END;

PROCEDURE denote(id: STRING; a: Types.Array): Types.PField;
VAR
    result: Types.PField;
BEGIN
    IF id = methodNameIndexOf THEN
        IF (a.elementsType IS Types.PRecord) OR (a.elementsType IS Types.PArray) THEN
            Errors.raise("'" + methodNameIndexOf + "' is not defined for array of '" + a.elementsType.description() + "'");
        END;
        result := NEW EberonTypes.MethodField(NEW MethodIndexOf(a.elementsType));
    END;
    RETURN result
END denote;

PROCEDURE StaticArray.denote(id: STRING; isReadObly: BOOLEAN): Types.PField;
BEGIN
    result <- denote(id, SELF);
    IF result = NIL THEN
        result := SUPER(id, isReadObly);
    END;
    RETURN result
END;

PROCEDURE OpenArray.denote(id: STRING; isReadObly: BOOLEAN): Types.PField;
BEGIN
    result <- denote(id, SELF);
    IF result = NIL THEN
        result := SUPER(id, isReadObly);
    END;
    RETURN result
END;

END EberonArray.

MODULE EberonDynamicArray;
IMPORT Cast, Code, Context, EberonArray, Errors, LanguageContext, Procedure, Types;
CONST
    methodNameAdd = "add";
    methodNameClear = "clear";
    methodNameRemove = "remove";
TYPE
    DynamicArray* = RECORD(Types.Array)
    END;
    PDynamicArray* = POINTER TO DynamicArray;

    AddCallGenerator = RECORD(Procedure.CallGenerator)
        cx: LanguageContext.PType;
        elementsType: Types.PType;
        code: STRING
    END;

    Method = RECORD(EberonArray.Method)
    END;

    MethodAdd = RECORD(Method)
        elementsType: Types.PType
    END;

    MethodClear = RECORD(Method)
    END;

    MethodRemove = RECORD(Method)
    END;

    MethodCallClear = RECORD(Procedure.StdCall)
    END;

    MethodCallRemove = RECORD(Procedure.StdCall)
    END;

PROCEDURE arrayDimensionDescription(VAR a: Types.Array): STRING;
VAR
    result: STRING;
BEGIN
    IF a IS DynamicArray THEN
        result := "*";
    ELSE
        result := Types.arrayDimensionDescription(a);
    END;
    RETURN result
END arrayDimensionDescription;

PROCEDURE DynamicArray.initializer(cx: Context.Type; forNew: BOOLEAN): STRING;
    RETURN "[]"
END DynamicArray.initializer;

PROCEDURE DynamicArray.description(): STRING;
    RETURN Types.arrayDescription(SELF, arrayDimensionDescription)
END DynamicArray.description;

PROCEDURE makeAddField(elementsType: Types.PType): EberonArray.PMethod;
VAR
    result: POINTER TO MethodAdd;
BEGIN
    NEW(result);
    result.name := methodNameAdd;
    result.elementsType := elementsType;
    RETURN result
END makeAddField;

PROCEDURE makeClearMethod(): EberonArray.PMethod;
VAR
    result: POINTER TO MethodClear;
BEGIN
    NEW(result);
    result.name := methodNameClear;
    RETURN result
END makeClearMethod;

PROCEDURE makeRemoveMethod(): EberonArray.PMethod;
VAR
    result: POINTER TO MethodRemove;
BEGIN
    NEW(result);
    result.name := methodNameRemove;
    RETURN result
END makeRemoveMethod;

PROCEDURE DynamicArray.denote(id: STRING): Types.PField;
VAR
    method: EberonArray.PMethod;
    result: Types.PField;
BEGIN
    IF      id = methodNameAdd THEN
        method := makeAddField(SELF.elementsType);
    ELSIF   id = methodNameClear THEN
        method := makeClearMethod();
    ELSIF   id = methodNameRemove THEN
        method := makeRemoveMethod();
    ELSE
        method := EberonArray.denoteMethod(id, SELF.elementsType);
    END;
    IF method # NIL THEN
        result := EberonArray.makeMethodField(method);
    ELSE
        result := SUPER(id);
    END;
    RETURN result
END DynamicArray.denote;

PROCEDURE makeDynamicArray*(elementsType: Types.PType): PDynamicArray;
VAR
    result: PDynamicArray;
BEGIN
    NEW(result);
    Types.initArray(elementsType, result^);
    RETURN result
END makeDynamicArray;

PROCEDURE AddCallGenerator.handleArgument(e: Code.PExpression);
BEGIN
    IF SELF.code # "" THEN
        Errors.raise("method 'add' expects one argument, got many");
    END;

    argCode <- Procedure.makeArgumentsCode(SELF.cx);
    Procedure.checkArgument(
        e, 
        Types.makeProcedureArgument(SELF.elementsType, FALSE), 
        0, 
        argCode, 
        SELF.cx.types);
    SELF.code := argCode.result();
    
    t <- e.type();
    IF t IS Types.PArray THEN
        SELF.code := Cast.cloneArray(t^, SELF.code, SELF.cx.rtl^);
    ELSIF t IS Types.PRecord THEN
        SELF.code := SELF.cx.rtl.cloneRecord(SELF.code);
    END;
END AddCallGenerator.handleArgument;

PROCEDURE AddCallGenerator.end(): Code.PExpression;
BEGIN
    IF SELF.code = "" THEN
        Errors.raise("method 'add' expects one argument, got nothing");
    END;
    RETURN Code.makeSimpleExpression(
            "(" + SELF.code + ")",
            NIL)
END AddCallGenerator.end;

PROCEDURE Method.description(): STRING;
    RETURN "dynamic array method '" + SELF.name + "'"
END Method.description;

PROCEDURE MethodAdd.designatorCode(id: STRING): STRING;
    RETURN "push"
END MethodAdd.designatorCode;

PROCEDURE MethodAdd.callGenerator(cx: LanguageContext.PType): Procedure.PCallGenerator;
VAR
    result: POINTER TO AddCallGenerator;
BEGIN
    NEW(result);
    result.cx := cx;
    result.elementsType := SELF.elementsType;
    RETURN result
END MethodAdd.callGenerator;

PROCEDURE MethodClear.designatorCode(id: STRING): STRING;
    RETURN "splice"
END MethodClear.designatorCode;

PROCEDURE MethodCallClear.make(args: ARRAY OF Code.PExpression; cx: LanguageContext.PType): Code.PExpression;
BEGIN
    Procedure.processArguments(args, SELF.args, NIL, cx.types);
    RETURN Code.makeSimpleExpression("(0, Number.MAX_VALUE)", NIL)
END MethodCallClear.make;

PROCEDURE MethodCallRemove.make(args: ARRAY OF Code.PExpression; cx: LanguageContext.PType): Code.PExpression;
BEGIN
    argCode <- Procedure.makeArgumentsCode(cx);
    arg <- Procedure.checkSingleArgument(args, SELF, cx.types, argCode);
    value <- arg.constValue();
    IF (value # NIL) & (value^ IS Code.IntConst) THEN
        Code.checkIndex(value.value);
    END;
    RETURN Code.makeSimpleExpression("(" + argCode.result() + ", 1)", NIL)
END MethodCallRemove.make;

PROCEDURE MethodRemove.designatorCode(id: STRING): STRING;
    RETURN "splice"
END MethodRemove.designatorCode;

PROCEDURE MethodClear.callGenerator(cx: LanguageContext.PType): Procedure.PCallGenerator;
VAR
    call: POINTER TO MethodCallClear;
BEGIN
    NEW(call);
    Procedure.initStdCall(call);
    RETURN Procedure.makeCallGenerator(call, cx)
END MethodClear.callGenerator;

PROCEDURE MethodRemove.callGenerator(cx: LanguageContext.PType): Procedure.PCallGenerator
;
VAR
    a: Types.PProcedureArgument;
    call: POINTER TO MethodCallRemove;
BEGIN
    NEW(call);
    Procedure.initStdCall(call);

    NEW(a);
    a.type := Types.basic.integer;
    call.args.add(a);
    RETURN Procedure.makeCallGenerator(call, cx)
END MethodRemove.callGenerator;

END EberonDynamicArray.
MODULE EberonDynamicArray;
IMPORT Cast, Code, Context, EberonArray, EberonTypes, Errors, LanguageContext, Procedure, Types;
CONST
    methodNameAdd = "add";
    methodNameClear = "clear";
    methodNameRemove = "remove";
TYPE
    DynamicArray* = RECORD(Types.Array)
    END;
    PDynamicArray* = POINTER TO DynamicArray;

    AddCallGenerator = RECORD(Procedure.CallGenerator)
        cx: LanguageContext.PType;
        elementsType: Types.PType;
        code: STRING
    END;

    Method = RECORD(EberonArray.Method)
    END;

    MethodAdd = RECORD(Method)
        PROCEDURE MethodAdd(elementsType: Types.PType);

        elementsType: Types.PType
    END;

    MethodClear = RECORD(Method)
    END;

    MethodRemove = RECORD(Method)
    END;

    MethodCallClear = RECORD(Procedure.StdCall)
    END;

    MethodCallRemove = RECORD(Procedure.StdCall)
    END;

    MethodAddField = RECORD(EberonTypes.MethodField)
        PROCEDURE MethodAddField(elementsType: Types.PType);
    END;

    MethodClearField = RECORD(EberonTypes.MethodField)
        PROCEDURE MethodClearField();
    END;

    MethodRemoveField = RECORD(EberonTypes.MethodField)
        PROCEDURE MethodRemoveField();
    END;

VAR
    methodClear: POINTER TO MethodClearField;
    methodRemove: POINTER TO MethodRemoveField;

PROCEDURE arrayDimensionDescription(VAR a: Types.Array): STRING;
VAR
    result: STRING;
BEGIN
    IF a IS DynamicArray THEN
        result := "*";
    ELSE
        result := Types.arrayDimensionDescription(a);
    END;
    RETURN result
END arrayDimensionDescription;

PROCEDURE DynamicArray.initializer(cx: Context.Type): STRING;
    RETURN "[]"
END;

PROCEDURE DynamicArray.description(): STRING;
    RETURN Types.arrayDescription(SELF, arrayDimensionDescription)
END DynamicArray.description;

PROCEDURE MethodAdd.MethodAdd(elementsType: Types.PType)
    | SUPER(methodNameAdd, NIL),
      elementsType(elementsType);
END;

PROCEDURE DynamicArray.denote(id: STRING): Types.PField;
VAR
    result: Types.PField;
BEGIN
    IF      id = methodNameAdd THEN
        result := NEW MethodAddField(SELF.elementsType);
    ELSIF   id = methodNameClear THEN
        result := methodClear;
    ELSIF   id = methodNameRemove THEN
        result := methodRemove;
    ELSE
        result := EberonArray.denoteMethod(id, SELF.elementsType);
        IF result = NIL THEN
            result := SUPER(id);
        END;
    END;
    RETURN result
END;

PROCEDURE AddCallGenerator.handleArgument(e: Code.PExpression);
BEGIN
    IF SELF.code # "" THEN
        Errors.raise("method 'add' expects one argument, got many");
    END;

    argCode <- Procedure.makeArgumentsCode(SELF.cx);
    Procedure.checkArgument(
        e, 
        NEW Types.ProcedureArgument(SELF.elementsType, FALSE), 
        0, 
        argCode, 
        SELF.cx.types);
    SELF.code := argCode.result();
    
    t <- e.type();
    IF t IS Types.PArray THEN
        SELF.code := Cast.cloneArray(t^, SELF.code, SELF.cx.rtl^);
    ELSIF t IS Types.PRecord THEN
        SELF.code := SELF.cx.rtl.cloneRecord(SELF.code);
    END;
END AddCallGenerator.handleArgument;

PROCEDURE AddCallGenerator.end(): Code.PExpression;
BEGIN
    IF SELF.code = "" THEN
        Errors.raise("method 'add' expects one argument, got nothing");
    END;
    RETURN Code.makeSimpleExpression(
            "(" + SELF.code + ")",
            NIL)
END AddCallGenerator.end;

PROCEDURE Method.description(): STRING;
    RETURN "dynamic array method '" + SELF.name + "'"
END Method.description;

PROCEDURE MethodAddField.designatorCode(leadCode: STRING): Types.PFieldCode;
    RETURN NEW Types.FieldCode(leadCode + "." + "push", "", "");
END;

PROCEDURE MethodClearField.designatorCode(leadCode: STRING): Types.PFieldCode;
    RETURN NEW Types.FieldCode(leadCode + "." + "splice", "", "");
END;

PROCEDURE MethodRemoveField.designatorCode(leadCode: STRING): Types.PFieldCode;
    RETURN NEW Types.FieldCode(leadCode + "." + "splice", "", "");
END;

PROCEDURE MethodAdd.callGenerator(cx: LanguageContext.PType): Procedure.PCallGenerator;
BEGIN
    result <- NEW AddCallGenerator();
    result.cx := cx;
    result.elementsType := SELF.elementsType;
    RETURN result
END MethodAdd.callGenerator;

PROCEDURE MethodAddField.MethodAddField(elementsType: Types.PType)
    | SUPER(NEW MethodAdd(elementsType));
END;

PROCEDURE MethodClearField.MethodClearField()
    | SUPER(NEW MethodClear(methodNameClear, NIL));
END;

PROCEDURE MethodRemoveField.MethodRemoveField()
    | SUPER(NEW MethodRemove(methodNameRemove, NIL));
END;

PROCEDURE MethodCallClear.make(args: ARRAY OF Code.PExpression; cx: LanguageContext.PType): Code.PExpression;
BEGIN
    Procedure.processArguments(args, SELF.args, NIL, cx.types);
    RETURN Code.makeSimpleExpression("(0, Number.MAX_VALUE)", NIL)
END MethodCallClear.make;

PROCEDURE MethodCallRemove.make(args: ARRAY OF Code.PExpression; cx: LanguageContext.PType): Code.PExpression;
BEGIN
    argCode <- Procedure.makeArgumentsCode(cx);
    arg <- Procedure.checkSingleArgument(args, SELF, cx.types, argCode);
    value <- arg.constValue();
    IF (value # NIL) & (value^ IS Code.IntConst) THEN
        Code.checkIndex(value.value);
    END;
    RETURN Code.makeSimpleExpression("(" + argCode.result() + ", 1)", NIL)
END MethodCallRemove.make;

PROCEDURE MethodClear.callGenerator(cx: LanguageContext.PType): Procedure.PCallGenerator;
    RETURN Procedure.makeCallGenerator(NEW MethodCallClear(), cx)
END;

PROCEDURE MethodRemove.callGenerator(cx: LanguageContext.PType): Procedure.PCallGenerator;
BEGIN
    call <- NEW MethodCallRemove();
    a <- NEW Types.ProcedureArgument(Types.basic.integer, FALSE);
    call.args.add(a);
    RETURN Procedure.makeCallGenerator(call, cx)
END MethodRemove.callGenerator;

BEGIN
    NEW(methodClear);
    NEW(methodRemove);
END EberonDynamicArray.
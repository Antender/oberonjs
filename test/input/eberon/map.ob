MODULE test;
TYPE
    MapOfInteger = MAP OF INTEGER;

    RecordWithMapInitializedInConstructor = RECORD
        PROCEDURE RecordWithMapInitializedInConstructor(m: MapOfInteger);

        m: MapOfInteger;
    END;

    T = RECORD END;
VAR
    m: MapOfInteger;
    mr: MAP OF T;
    mm: MAP OF MapOfInteger;
    ma: MAP OF ARRAY * OF INTEGER;
    r: RECORD m: MapOfInteger; END;
    a: ARRAY 1 OF MapOfInteger;

PROCEDURE RecordWithMapInitializedInConstructor.RecordWithMapInitializedInConstructor(m: MapOfInteger)
    | m(m);
END;

PROCEDURE ForEach();
VAR
    m: MapOfInteger;
BEGIN
    FOR k, v IN m DO
        ASSERT(v = 0);
        ASSERT(k # "");
    END;
END;

PROCEDURE makeMap(): MapOfInteger;
VAR
    m: MapOfInteger;
BEGIN
    RETURN m;
END;

PROCEDURE ForEachWithExpression();
BEGIN
    FOR k, v IN makeMap() DO
    END;
END;

PROCEDURE NestedForEach();
VAR
    m: MapOfInteger;

    PROCEDURE inner();
    BEGIN
        FOR k, v IN m DO
            FOR k2, v2 IN m DO
            END;
        END;
    END;
BEGIN
    FOR k, v IN m DO
        FOR k2, v2 IN m DO
        END;
    END;
    FOR k3, v3 IN m DO
        FOR k, v IN m DO
        END;
    END;
END;

PROCEDURE put();
TYPE
    T = RECORD 
        field: INTEGER;
    END;
    Derived = RECORD(T)
    END;
VAR
    m: MapOfInteger;
    s: STRING;
    a: ARRAY 3 OF CHAR;
    r: T;
    pr: POINTER TO T;
    d: Derived;
    mapOfMap: MAP OF MapOfInteger;
    mapOfRecord: MAP OF T;
    mapOfPointer: MAP OF POINTER TO T;
BEGIN
    m["a"] := 1;
    m["abc"] := 2;
    m[s] := 3;
    m[a] := 4;
    mapOfMap["abc"]["cde"] := 5;

    mapOfRecord["abc"] := r;

    NEW(pr);
    mapOfRecord["abc"] := pr^;
    mapOfRecord["abc"] := d;
    mapOfRecord["abc"] := T();
    mapOfRecord["abc"] := Derived();
    mapOfRecord["abc"].field := 6;
    
    mapOfPointer["abc"] := NEW T();
    mapOfPointer["abc"]^ := T();

    mapOfPointer["abc"] := NEW Derived();
    mapOfPointer["abc"]^ := Derived();
END;

PROCEDURE in();
VAR
    m: MAP OF INTEGER;
BEGIN
    ASSERT(~("abc" IN m));
END;

PROCEDURE get();
VAR
    m: MapOfInteger;
    s: STRING;
    a: ARRAY 3 OF CHAR;
BEGIN
    ASSERT(m["a"] = 1);
    ASSERT(m["abc"] = 2);
    ASSERT(m[s] = 3);
    ASSERT(m[a] = 4);
END;

PROCEDURE remove();
VAR
    m: MapOfInteger;
BEGIN
    m.remove("abc");
END;

PROCEDURE clear();
VAR
    m: MapOfInteger;
BEGIN
    m.clear();
    m.clear;
END;

PROCEDURE returnLocalMap(): MapOfInteger;
VAR
    result: MapOfInteger;
BEGIN
    RETURN result;
END;

PROCEDURE returnNonLocalMap(m: MapOfInteger): MapOfInteger;
    RETURN m;
END;

PROCEDURE assign(a: MapOfInteger);
VAR
    v: MapOfInteger;
BEGIN
    v := a;
    v2 <- a;
    v3 <- v2;
    v4 <- returnLocalMap();
    v5 <- returnNonLocalMap(v);
END;

PROCEDURE copyMapOfRecord();
TYPE
    T = RECORD END;
VAR
    r1, r2: MAP OF T;
BEGIN
    r1 := r2;
END;

PROCEDURE cloneMapOfRecord();
TYPE
    T = RECORD END;
VAR
    r1: MAP OF T;
BEGIN
    r2 <- r1;
END;

PROCEDURE passByRef(VAR m: MapOfInteger);
BEGIN
    m["abc"] := 123;
    ASSERT("abc" IN m);
END;

PROCEDURE passMapRecordElementByRef(VAR r: T);
END;

PROCEDURE passMapMapElementByRef(VAR m: MapOfInteger);
END;

PROCEDURE passMapArrayElementByRef(VAR a: ARRAY * OF INTEGER);
END;

BEGIN
    FOR k, v IN m DO
        FOR k2, v2 IN m DO
        END;
    END;

    passByRef(m);
    passByRef(r.m);
    passByRef(a[0]);
    passMapRecordElementByRef(mr["a"]);
    passMapMapElementByRef(mm["a"]);
    passMapArrayElementByRef(ma["a"]);
END test.
MODULE m;
TYPE
    T = RECORD 
    	PROCEDURE p();
    	PROCEDURE pSuper(i: INTEGER);
    END;
	TD = RECORD(T) END;

    Base = RECORD
        PROCEDURE method(): STRING;
        PROCEDURE baseOnly();
    END;

    Derived1 = RECORD(Base)
    END;

    Derived2 = RECORD(Base)
    END;

VAR
    pCalled: BOOLEAN;
    pDerivedCalled: BOOLEAN;
    pSuperCalled: INTEGER;
	r: T;
	rd: TD;
    d1: Derived1;
    d2: Derived2;

PROCEDURE T.p();
BEGIN
	pCalled := TRUE;
END T.p;

PROCEDURE T.pSuper(i: INTEGER);
BEGIN
	pSuperCalled := i;
END T.pSuper;

PROCEDURE Base.baseOnly();
END Base.baseOnly;

PROCEDURE TD.p();
BEGIN
	pDerivedCalled := TRUE;
END TD.p;

PROCEDURE TD.pSuper(i: INTEGER);
BEGIN
	SUPER(i);
END TD.pSuper;

PROCEDURE Derived1.method(): STRING;
BEGIN
    RETURN "Derived1"
END Derived1.method;

PROCEDURE Derived2.method(): STRING;
    RETURN "Derived2"
END Derived2.method;

PROCEDURE copyRecord(from: Base; VAR to: Base);
BEGIN
    to := from;
END copyRecord;

BEGIN
    d1.baseOnly();
    d2.baseOnly();

	ASSERT(~pCalled);
	ASSERT(~pDerivedCalled);
	r.p();
	ASSERT(pCalled);
	ASSERT(~pDerivedCalled);

	pCalled := FALSE;
	rd.p();
	ASSERT(~pCalled);
	ASSERT(pDerivedCalled);

	rd.pSuper(123);
	ASSERT(pSuperCalled = 123);

    (* methods are not copied*)
    copyRecord(d1, d2);
    ASSERT(d1.method() = "Derived1");
    ASSERT(d2.method() = "Derived2");
END m.
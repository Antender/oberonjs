MODULE test;

PROCEDURE integer(b: BOOLEAN; i1, i2: INTEGER): INTEGER;
    RETURN b ? i1 : i2;
END;

PROCEDURE integer2(b1, b2: BOOLEAN; i1, i2, i3: INTEGER): INTEGER;
    RETURN b1 ? i1 : b2 ? i2 : i3;
END;

PROCEDURE byRef(b: BOOLEAN; VAR i1, i2: INTEGER): INTEGER;
    RETURN b ? i1 : i2;
END;

PROCEDURE byRef1(b: BOOLEAN; VAR i1: INTEGER; i2: INTEGER): INTEGER;
    RETURN b ? i1 : i2;
END;

PROCEDURE byRef2(b: BOOLEAN; i1: INTEGER; VAR i2: INTEGER): INTEGER;
    RETURN b ? i1 : i2;
END;

PROCEDURE passRecord(b: BOOLEAN);
TYPE
	T = RECORD END;
VAR
	r1, r2: T;

	PROCEDURE p(r: T); END;
BEGIN
	p(b ? r1 : r2);
END;

PROCEDURE initRecord(b: BOOLEAN);
TYPE
	T = RECORD END;
VAR
	r1, r2: T;
BEGIN
	r <- b ? r1 : r2;
END;

PROCEDURE initRecordFromConstructor(b: BOOLEAN);
TYPE
	T = RECORD 
		PROCEDURE T(i: INTEGER); 
	END;
	PROCEDURE T.T(i: INTEGER); 
	END;
BEGIN
	r <- b ? T(1) : T(2);
END;

PROCEDURE initRecordFromConstructorOrVariable(b: BOOLEAN);
TYPE
	T = RECORD END;
VAR
	r: T;
BEGIN
	r1 <- b ? r : T();
	r2 <- b ? T() : r;
END;

PROCEDURE operatorsPriority(b: BOOLEAN): INTEGER;
	RETURN (b ? 1 : 2) + 3;
END;

END test.
MODULE m;

TYPE
    Base = RECORD END;
    PBase = POINTER TO Base;
    Derived = RECORD (Base) derivedField: INTEGER END;
    PDerived = POINTER TO Derived;

    A = ARRAY 10 OF INTEGER;

VAR 
    r: Derived;
    pbVar: PBase;
    pdVar: PDerived;
    i: INTEGER;
    a: A;

PROCEDURE p(): BOOLEAN; 
    RETURN FALSE
END p;

PROCEDURE void();
END void;

PROCEDURE valueArgs(r: Derived; i: INTEGER; a: A);
BEGIN
    v1 <- r;
    v2 <- i;
    v3 <- a;
END valueArgs;

PROCEDURE varArgs(VAR r: Derived; VAR i: INTEGER; a: A);
BEGIN
    v1 <- r;
    v2 <- i;
    v3 <- a;
END varArgs;

PROCEDURE pChar(c: CHAR);
END pChar;

PROCEDURE pCharArray(a: ARRAY OF CHAR);
END pCharArray;

PROCEDURE pString(s: STRING);
END pString;

BEGIN
    v1 <- 0;
    v2 <- 1.23;
    v3 <- "abc";
    
    vs <- 22X;
    pChar(vs[0]);
    pChar(vs);
    pCharArray(vs);
    pString(vs);
    
    v4 <- TRUE;
    v5 <- i;
    v6 <- i + i;
    v7 <- p();
    v8 <- void;
    do <- {};

    tempRecord <- r;
    tempArray <- a;

    NEW(pdVar);
    pbVar := pdVar;
    pb <- pbVar;
    IF pb IS PDerived THEN
        pb.derivedField := 123;
    END;

    ASSERT(~(pb IS PDerived) OR (pb.derivedField = 123));

    FOR j <- 0 TO 10 DO
    END;

END m.